{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/random/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/random/source/css/blank.gif","path":"css/blank.gif","modified":0,"renderable":1},{"_id":"themes/random/source/css/fancybox_loading.gif","path":"css/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/random/source/css/fancybox_loading@2x.gif","path":"css/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/random/source/css/fancybox_overlay.png","path":"css/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/random/source/css/fancybox_sprite.png","path":"css/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/random/source/css/fancybox_sprite@2x.png","path":"css/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/random/source/css/highlight-railscasts.css","path":"css/highlight-railscasts.css","modified":0,"renderable":1},{"_id":"themes/random/source/css/jquery.fancybox-thumbs.css","path":"css/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/random/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/random/source/css/random.styl","path":"css/random.styl","modified":0,"renderable":1},{"_id":"themes/random/source/css/next.png","path":"css/next.png","modified":0,"renderable":1},{"_id":"themes/random/source/css/prev.png","path":"css/prev.png","modified":0,"renderable":1},{"_id":"themes/random/source/css/sprite.svg","path":"css/sprite.svg","modified":0,"renderable":1},{"_id":"themes/random/source/css/plyr.css","path":"css/plyr.css","modified":0,"renderable":1},{"_id":"themes/random/source/css/vegas.min.css","path":"css/vegas.min.css","modified":0,"renderable":1},{"_id":"themes/random/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":1,"renderable":1},{"_id":"themes/random/source/js/jquery.fancybox-thumbs.js","path":"js/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/random/source/js/jquery.fancybox.pack.js","path":"js/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/random/source/js/jquery.mousewheel.pack.js","path":"js/jquery.mousewheel.pack.js","modified":0,"renderable":1},{"_id":"themes/random/source/js/plyr.js","path":"js/plyr.js","modified":0,"renderable":1},{"_id":"themes/random/source/js/random.js","path":"js/random.js","modified":0,"renderable":1},{"_id":"themes/random/source/js/vegas.min.js","path":"js/vegas.min.js","modified":0,"renderable":1},{"_id":"themes/random/source/js/jquery-2.2.3.min.js","path":"js/jquery-2.2.3.min.js","modified":0,"renderable":1},{"_id":"themes/random/source/css/iconfont/iconfont.eot","path":"css/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/random/source/css/iconfont/iconfont.css","path":"css/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/random/source/css/iconfont/iconfont.svg","path":"css/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/random/source/css/iconfont/iconfont.woff","path":"css/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/random/source/css/iconfont/iconfont.ttf","path":"css/iconfont/iconfont.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/random/LICENSE","hash":"6db5a6ccf7ca738b1a3fe318a63035fa6b16b023","modified":1476670294000},{"_id":"themes/random/.gitignore","hash":"95f03058c57e530d66593f3a5feaa7e77c21a385","modified":1476670294000},{"_id":"themes/random/_config.yml","hash":"1b8face8c74b823a3983efc5d25b4c86c50976fd","modified":1476782231000},{"_id":"themes/random/README.CN.md","hash":"3c191bcf59f5d12096980d1ff610c4262ae4d9f1","modified":1476670294000},{"_id":"themes/random/README.md","hash":"77b7341762b55eea14048c0199323dbd75943ff1","modified":1476670294000},{"_id":"source/_posts/黄小逗爸爸妈妈爱你.md","hash":"1220c60d61e37a10db6b8b7e89ec277a158ea296","modified":1476437152000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1476437636000},{"_id":"themes/random/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1476670294000},{"_id":"source/_posts/Runtime.md","hash":"fc3e552ad8b5b0541611438344c1cc035dcda6a3","modified":1476869166000},{"_id":"source/about/index.md","hash":"86b7362b61362fe016899fb15e6f3518de3f1edd","modified":1476691306000},{"_id":"themes/random/.git/config","hash":"ae9b4ebc456e3e2796983a0a06cb2cb67a8b5e2e","modified":1476670294000},{"_id":"source/tags/index.md","hash":"69cbc2cd7cb87cbef1833cfc66a31232a410d521","modified":1476690979000},{"_id":"themes/random/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1476670287000},{"_id":"themes/random/.git/packed-refs","hash":"cf3bf6dbc547357d2b88b113d4d620ba04379fe5","modified":1476670294000},{"_id":"source/categories/index.md","hash":"b2978a8d69d912ad96c6b096050610fcf49064b8","modified":1476690949000},{"_id":"themes/random/languages/zh-CN.yml","hash":"2ac21af03fe4b53f13678540872bec7b076616ab","modified":1476670294000},{"_id":"themes/random/languages/en.yml","hash":"fe737fb08871032dacaa5d1653020935e2947f19","modified":1476782333000},{"_id":"themes/random/.git/index","hash":"f0eaeb1985ccde082c70dd87bc174a651376e2d7","modified":1476783313000},{"_id":"themes/random/layout/.DS_Store","hash":"6c7c75371585ec1949297a594d97ddcdd6c1b73b","modified":1476673042000},{"_id":"themes/random/layout/archive.swig","hash":"8366dd9b6b9397195d44b261030287676b95d080","modified":1476670294000},{"_id":"themes/random/layout/category.swig","hash":"0865ecd34495fea512b4030343d68a096af74662","modified":1476670294000},{"_id":"themes/random/layout/index.swig","hash":"eeb8056bac0247565db0f4ade40754f81eadf153","modified":1476670294000},{"_id":"themes/random/layout/page.swig","hash":"598aac369e8acbcd6c985ef448a5d305794f2f6e","modified":1476670294000},{"_id":"themes/random/layout/post.swig","hash":"c212c13c40f40d05312738713e6f5d4c6a29b345","modified":1476672884000},{"_id":"themes/random/layout/tag.swig","hash":"02a7c5f237d386ff0f8240c5312b1d4f33769f1d","modified":1476670294000},{"_id":"themes/random/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1476670294000},{"_id":"themes/random/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1476670287000},{"_id":"themes/random/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1476670287000},{"_id":"themes/random/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1476670287000},{"_id":"themes/random/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1476670287000},{"_id":"themes/random/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1476670287000},{"_id":"themes/random/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1476670287000},{"_id":"themes/random/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1476670287000},{"_id":"themes/random/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1476670287000},{"_id":"themes/random/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1476670287000},{"_id":"themes/random/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1476670287000},{"_id":"themes/random/.git/logs/HEAD","hash":"c10ca8b6fe1e02a674b14a3a148fce058c87411f","modified":1476670294000},{"_id":"themes/random/layout/includes/baidu-tongji.swig","hash":"be239dfaae4829b4e543e54064177135743c0535","modified":1476670294000},{"_id":"themes/random/layout/includes/disqus.swig","hash":"730069d9daf3ce0749080d501309799d742c94d2","modified":1476670294000},{"_id":"themes/random/layout/includes/duoshuo.swig","hash":"e80504a1d69a7c71504d0a0951b647426137a9f8","modified":1476670294000},{"_id":"themes/random/layout/includes/footer.swig","hash":"2e180273705d81d29e6d61b2b808a96a3af97709","modified":1476670294000},{"_id":"themes/random/layout/includes/gallery.swig","hash":"f4f5d017e4e6df16b5d4cba54476ae4efe708baf","modified":1476670294000},{"_id":"themes/random/layout/includes/google-analytics.swig","hash":"9cc62509da31f190b9b9e9fa4e753fa1175f8f28","modified":1476670294000},{"_id":"themes/random/layout/includes/head.swig","hash":"255b62d804f4d9452e6217d7c0033c77a469e800","modified":1476670294000},{"_id":"themes/random/layout/includes/jiathis.swig","hash":"0f83ea0eb5606d89c59f4976fdca568325debb5b","modified":1476670294000},{"_id":"themes/random/layout/includes/pagination.swig","hash":"9658fdd947e8f6e46e2e30000ea5423656e6c3bc","modified":1476670294000},{"_id":"themes/random/layout/includes/layout.swig","hash":"d6c98eb540e2dc11f014368b3ea0596bd91654d4","modified":1476863027000},{"_id":"themes/random/layout/includes/post-title-item.swig","hash":"02e7ae0a6dddca9917fd0bc9ddef2fb314db6b55","modified":1476670294000},{"_id":"themes/random/layout/includes/recent-posts.swig","hash":"482676e40a076d1e80deeefe70bf9bfbe1a84f5c","modified":1476670294000},{"_id":"themes/random/layout/includes/side-pagination.swig","hash":"b2a135b031bc62af1b78ee43f8664f8dae240916","modified":1476670294000},{"_id":"themes/random/layout/includes/social-icon.swig","hash":"6c86c7a11c5128bb54447f788cbbbeabaa01bbf9","modified":1476670294000},{"_id":"themes/random/layout/includes/toc.swig","hash":"d25920a5c7709794adfb6190ddbd6fdad4be2c55","modified":1476670294000},{"_id":"themes/random/layout/includes/user-card.swig","hash":"0d52ab1c3d45d2046be8f688bd2a40530ad897fd","modified":1476670294000},{"_id":"themes/random/layout/includes/uyan.swig","hash":"cadcf19ef49498212b1694bbf8cf6fdcf0ad6a06","modified":1476670294000},{"_id":"themes/random/source/css/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476670294000},{"_id":"themes/random/source/css/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476670294000},{"_id":"themes/random/source/css/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476670294000},{"_id":"themes/random/source/css/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476670294000},{"_id":"themes/random/source/css/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476670294000},{"_id":"themes/random/source/css/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476670294000},{"_id":"themes/random/source/css/highlight-railscasts.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1476868800000},{"_id":"themes/random/source/css/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1476670294000},{"_id":"themes/random/source/css/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1476670294000},{"_id":"themes/random/source/css/random.styl","hash":"8e944cb4b7db363fc713a9d0311f53a85a924615","modified":1476866780000},{"_id":"themes/random/source/css/next.png","hash":"1bf3e61fbe6858bd9d154e23a477a06307f80436","modified":1476670294000},{"_id":"themes/random/source/css/prev.png","hash":"c35bf41b4597a371e80ffdaf338b5693a082a5f4","modified":1476670294000},{"_id":"themes/random/source/css/sprite.svg","hash":"4ed6a0d335ce214ec00fc9e56867687798a53ee3","modified":1476670294000},{"_id":"themes/random/source/css/plyr.css","hash":"9358fad3327bd09d047e96157c80612a8ed283ec","modified":1476686215000},{"_id":"themes/random/source/css/vegas.min.css","hash":"5810e20875386f98565b69de5ca8ee1d0a6d1feb","modified":1476670294000},{"_id":"themes/random/source/js/highlight.pack.js","hash":"bafaef07b8c790287cf42b9e7e5a8a5ec4cc3afe","modified":1476868889000},{"_id":"themes/random/source/js/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1476670294000},{"_id":"themes/random/source/js/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1476670294000},{"_id":"themes/random/source/js/jquery.mousewheel.pack.js","hash":"1e1b44eb7cfade680c52d8748846425ecd809bfd","modified":1476670294000},{"_id":"themes/random/source/js/plyr.js","hash":"11e09c25a5821fc08880b8ab1f691ad58780bde3","modified":1476670294000},{"_id":"themes/random/source/js/random.js","hash":"0a99a9de1cbcdaf2c29817f0d9d5dea201b7aa38","modified":1476865407000},{"_id":"themes/random/source/js/vegas.min.js","hash":"8d24ba5346a600c4b77ef39d68ee924ab48c8790","modified":1476670294000},{"_id":"themes/random/.git/refs/heads/master","hash":"9ec1c16994d3c8178fdc9b979280319b4da363ee","modified":1476670294000},{"_id":"themes/random/source/js/jquery-2.2.3.min.js","hash":"e3dbb65f2b541d842b50d37304b0102a2d5f2387","modified":1476670294000},{"_id":"themes/random/.git/objects/pack/pack-1186e2da806484e32f68fafac57ad3c4df0d9267.idx","hash":"8d45f92c16917e0422e26b78fd1781bcbd955fc9","modified":1476670294000},{"_id":"themes/random/source/css/iconfont/iconfont.eot","hash":"b9e72f319df3b2ec14fe149a6fb9fd7a5611c890","modified":1476670294000},{"_id":"themes/random/source/css/iconfont/iconfont.css","hash":"83dd7971a658b37bb4dda7254fe626149a88eeac","modified":1476670294000},{"_id":"themes/random/source/css/iconfont/iconfont.svg","hash":"0a63d908941704fe553262608a5db654c5a41035","modified":1476670294000},{"_id":"themes/random/source/css/iconfont/iconfont.woff","hash":"bac623f9739573cef3cde42ae326397e8623c1de","modified":1476670294000},{"_id":"themes/random/source/css/iconfont/iconfont.ttf","hash":"51bffbef25c22482f20f5af4554c477562e886c9","modified":1476670294000},{"_id":"themes/random/.git/logs/refs/heads/master","hash":"c10ca8b6fe1e02a674b14a3a148fce058c87411f","modified":1476670294000},{"_id":"themes/random/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1476670294000},{"_id":"themes/random/.git/logs/refs/remotes/origin/HEAD","hash":"c10ca8b6fe1e02a674b14a3a148fce058c87411f","modified":1476670294000},{"_id":"themes/random/.git/objects/pack/pack-1186e2da806484e32f68fafac57ad3c4df0d9267.pack","hash":"76d6edd781e1fa07f052ba74e9bf6aeee1d6221b","modified":1476670294000},{"_id":"public/about/index.html","hash":"67ddb791aa482931cec8a6aa849082fd0732338f","modified":1476866453722},{"_id":"public/tags/index.html","hash":"43547e106e51e79acc04b945097465a75931519c","modified":1476866453722},{"_id":"public/categories/index.html","hash":"cc8d1649ad1175c47e10fbf061e8bed71f1ca95c","modified":1476866453723},{"_id":"public/2016/10/14/黄小逗爸爸妈妈爱你/index.html","hash":"660e8ad9927a512e160bf71f2750d0b8d3d09b89","modified":1476866453723},{"_id":"public/archives/index.html","hash":"e6a6b9dc1588710447e772c4c125f891bfe361fd","modified":1476866453723},{"_id":"public/archives/2016/index.html","hash":"7cb897b34ca687a8e83642d004e039f13f6cb997","modified":1476866453723},{"_id":"public/archives/2016/09/index.html","hash":"6e4d8d8c47250ed8175f8d85ef4e531aa7e13201","modified":1476866453723},{"_id":"public/archives/2016/10/index.html","hash":"b565ad485e98e7ca83da7e87971341ae3476f637","modified":1476866453723},{"_id":"public/index.html","hash":"f100d1e998b70a7dd3a00b70566c12232e591368","modified":1476866453723},{"_id":"public/2016/09/14/Runtime/index.html","hash":"00f9c2f2b4e9b1b3a6bbe1f005f7ea570976671a","modified":1476866453723},{"_id":"public/css/random.css","hash":"20b4c50fae5e3e61a2c1066136435a42dc1694bf","modified":1476866808982}],"Category":[],"Data":[],"Page":[{"title":"关于","date":"2016-10-17T07:58:39.000Z","type":"about","_content":"\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2016-10-17 15:58:39\ntype: \"about\"\n---\n\n\n","updated":"2016-10-17T08:01:46.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciugicy0x0001zc3j3gfk5j20","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-10-17T07:54:26.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-10-17 15:54:26\ntype: \"tags\"\n---\n","updated":"2016-10-17T07:56:19.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciugicy120003zc3jrawq5kca","content":"","excerpt":"","more":""},{"title":"分类","date":"2016-10-17T07:54:43.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-10-17 15:54:43\ntype: \"categories\"\n---\n","updated":"2016-10-17T07:55:49.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciugicy140004zc3j4sw73ts5","content":"","excerpt":"","more":""}],"Post":[{"title":"黄小逗，爸爸妈妈爱你！❤️","_content":"黄小逗，爸爸妈妈爱你！❤️\n","source":"_posts/黄小逗爸爸妈妈爱你.md","raw":"\n---\ntitle: 黄小逗，爸爸妈妈爱你！❤️\n---\n黄小逗，爸爸妈妈爱你！❤️\n","slug":"黄小逗爸爸妈妈爱你","published":1,"date":"2016-10-14T09:25:13.000Z","updated":"2016-10-14T09:25:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciugicy0s0000zc3jt620g7ql","content":"<p>黄小逗，爸爸妈妈爱你！❤️</p>\n","excerpt":"","more":"<p>黄小逗，爸爸妈妈爱你！❤️</p>\n"},{"title":"C源码学习","notebook":"IOSReverse","_content":"\n## 1.理解NSObject和元类\n\n#### 1.1 在OC中的对象和类是什么\n\n1. 对象是在objc.h中定义的\n\n```objectivec\n/// An opaque type that represents an C class.\ntypedef struct objc_class *Class;\n\n/// Represents an instance of a class.\nstruct objc_object {\n    Class isa  OBJC_ISA_AVAILABILITY;\n};\n```\n\n2. 类是在runtime.h中定义的\n\n```objectivec\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n```\n\n>OC中的类和对象在源码中都是用结构体表示的。\n>本质上类并不是C语言中的类，它也是对象，也是某个类的实例，这个类称之为元类(metaclass)。\n>元类也是对象，也是某个类的实例，这个类叫根元类(root metaclass)。\n>所有元类所属类是同一个根元类。\n>根元类也是元类，所以它所属的类也是根元类，也就是它本身。\n>根元类指的就是根类(rootclass)的元类。\n>在C中有两个根类(rootclass)，一个是NSObject，一个是NSProxy。\n\n#### 1.2 isa指针和super_Class指针\n\n```bash\n                            nil\n                             ^\n                             |\n                             |\n                  isa   (NSObject)      isa                      isa\nrootclass实例   ++++++> rootclass类   ++++++> rootclass元类  <<+++++++\n                             ^   ^             |   ^              +  +\n                             |   |             |   |              +  +\n                             |   ---------------   |              +  +\n                  isa   (FatherClass)   isa                       +  +\nfatherclass实例 ++++++> fatherclass类 ++++++> fatherclass元类 ++++++   +\n                             ^                     ^                 +\n                             |                     |                 +\n                             |                     |                 +\n                  isa   (SubClass)      isa                          +\nsubclass实例    ++++++> subclass类    ++++++> subclass元类    ++++++++\n```\n\n**我的理解**\n\nrootclass元类实际上是objc_class结构体对象。当创建其subclass元类时，objc内部是将父类结构体中保存的方法，\n拷贝一份到新创建的objc_class结构提对象，此结构体对象的super_Class指针指向父类，所有子元类的isa指针都\n指向rootclass的元类(根元类)。根元类的isa指针指向自己。比较特殊的是：**根元类的super_Class指针指向根类。**\n\n而元类创建类的时候，类的类方法保存在元类中，实例方法保存在自己的类中。也都是用结构体记录。子类方法的\nisa指针指向元类，super_class指针父类。根类的super_Class指针为nil。\n\n实例类型是objc_object结构体，只有isa指针，没有super_Class指针。\n\n## 2.Runtime中常用名词\n\n#### 2.1 SEL\n \n```objectivec\ntypedef struct objc_selector *SEL;\n```\n\n>源码中没能直接找到objc_selector的定义，但是从书籍是了解到可以将SEL理解为char*指针。\n>如果我们包含函数`-(int)test{return 1;}`，然后打印`NSLog(@\"SEL = %s\",@selector(test));`\n>我们将会得到输出是:`SEL = test`\n>所以猜测`struct objc_selector`的定义为：\n\n```objectivec\nstruct objc_selector {\n    char name[64 or ...]\n    ...\n}\n```\n\n>它是objc_msgSend函数的第二个参数。在OC中用`selector`表示(Swift中是`Selector`类)\n>获取SEL方法选择器：\n\n```objectivec\n//使用Objc编译器命令@selector\nSEL sel = @selector(whatMethod)\n\n//使用Runtime系统的sel_registerName函数\nSEL sel = sel_registerName(\"whatMethod\")\n\n//使用OC方法\nSEL sel = NSSelectorFromString(@\"whatMethod\")\n```\n\n#### 2.2 id\n\n```objectivec\ntypedef struct objc_object *id;\n```\n\n#### 2.3 IMP\n\nsmalltalk是动态语言的鼻祖，更是OC发展的最大推动力。在smalltalk中，所有的东西都是对象（或者都应该被当做对象），例如表达式2 + 3被理解成向对象2发送了消息+，其中接收的参数是 3\n\n```objectivec\ntypedef id (*IMP)(id, SEL, ...);\n```\n\n>它就是一个函数指针，是有编译器生成的。指向了方法的实现。\n>`IMP`跟`block`是非常相似的东西，`IMP`可以看做是一个特殊的`block`，同样的系统提供了两者相互转换的方法：`imp_implementationWithBlock`和`imp_getBlock`。\n\n```objectivec\n+ (void)initialize\n    void (^requestBlock)(id object, SEL aSelector, id URL, id parameters) = \n        ^(id object, SEL aSelector, id URL, id parameters) {\n        // do some networking request\n    };\n    IMP requestIMP = imp_implementationWithBlock(requestBlock);\n    class_addMethod([self class], @selector(networkReuqest:parameters:), requestIMP, \"v@:@@\");\n}\n\n// View controller\n[self performSelector: @selector(networkReuqest:parameters:) withObject: URL withObject: parameters];\n```\n\n上面这段代码会crash的非常无厘头，提示EXC_BAD_ACCESS错误。因为block参数不能存在SEL!!去掉`SEL aSelector`这个参数就OK了。\n\n#### 2.4 Method\n\n```objectivec\ntypedef struct objc_method *Method;\n```\n\n>在`objc_method`中存储了方法名，方法类型和方法实现。\n\n```objectivec\n/**\nmethod_name: 方法的名字，通常我们使用@selector()的方式获取一个方法的SEL地址，这个被用来进行散列计算存储方法的IMP实现。由于SEL类型采用了散列的算法，因此如果同一个类中存在同样名字的方法，那么就会导致方法的IMP地址无法唯一化。这也是苹果不允许同名不同参数类型的方法存在的原因。\nmethod_type: 每一种数据类型有着自己对应的字符编码，method_type表示方法返回值、参数的字符编码，比如-(void)playWith:(id)的字符编码为v@:@。\n*/\nstruct objc_method {\n    SEL method_name                                          OBJC2_UNAVAILABLE;\n    char *method_types                                       OBJC2_UNAVAILABLE;\n    IMP method_imp                                           OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n```\n\n#### 2.5 Ivar \n\n```objectivec\ntypedef struct objc_ivar *Ivar;\n```\n\n>`Ivar`代表类中的实例变量。\n\n```objectivec\nstruct objc_ivar {\n    char *ivar_name                                          OBJC2_UNAVAILABLE;\n    char *ivar_type                                          OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n```\n\n#### 2.6 Property\n\n```objectivec\ntypedef struct objc_property *Property;\ntypedef struct objc_property *objc_property_t;//这个更常用\n```\n\n>`@property`标记了类中的属性，是指向`objc_property`结构体的指针。\n\n```objectivec\nstruct objc_property {\n    const char *name;\n    const char *attributes;\n};\n```\n\n#### 2.7 Cache\n\n```objectivec\ntypedef struct objc_cache *Cache\n```\n\n>Cache为方法调用的性能进行优化。\n\n```objectivec\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method buckets[1]                                        OBJC2_UNAVAILABLE;\n};\n```\n\n## 3.Runtime中方法使用\n\n#### 3.1 交换两个方法实现\n\n```objectivec\n//获取某个类的类方法\nMethod class_getClassMethod(Class cls , SEL name)\n\n//获取某个类的实例方法\nMethod class_getInstanceMethod(Class cls , SEL name)\n\n//交换两个方法的实现\nvoid method_exchangeImplementations(Method m1 , Method m2)\n```\n\n**实例**\n\n**交换类方法**\n\n```objectivec\nMethod m1 = class_getClassMethod([SomeClass class], @selector(method1))\nMethod m2 = class_getClassMethod([SomeClass class], @selector(method2))\n\nmethod_exchangeImplementations(m1, m2)\n```\n\n**拦截系统方法**\n\n1、为UIImage创建分类，自定义xd_imageNamed:用于拦截系统方法。\n\n```objectivec\n+ (UIImage *)xd_imageNamed:(NSString *)name {\n    double version = [[UIDevice currentDevice].systemVersion doubleValue];\n    if (version >= 7.0) {\n        // 如果系统版本是7.0以上，使用另外一套文件名结尾是‘_os7’的扁平化图片\n        name = [name stringByAppendingString:@\"_os7\"];\n    }\n    //这里因为系统方法名已经变成我们自定义的方法，所以这里要将实际要调用的\n    //imageNamed:换成我们自定义的方法才能调到系统的imageNamed:\n    return [UIImage xd_imageNamed:name];\n}\n```\n\n2、在分类中重写UIImage的load方法，实现方法交换。\n\n```objectivec\n+ (void)load {\n    // 获取两个类的类方法\n    Method m1 = class_getClassMethod([UIImage class], @selector(imageNamed:));\n    Method m2 = class_getClassMethod([UIImage class], @selector(xd_imageNamed:));\n    // 开始交换方法实现\n    method_exchangeImplementations(m1, m2);\n}\n```\n\n#### 3.2 给分类添加属性\n\n>在分类中是无法设置属性的，因为在分类声明中写`@property`只能生成get和set方法的声明，但是\n>无法生成成员变量。如果使用成员变量，比如:\n\n```objectivec\nint _num\n\n- (int)num {\n    return _num;\n}\n\n- (void)setnum:(int)num {\n    _num = num;\n}\n\n//但是全局变量程序整个执行过程中内存里只有一份，当我创建多个对象\n//修改的都是同一个值。\n```\n\n**属性关联**\n\n```objectivec\n/**\n将值value和对象object关联起来(将值存储到对象中)\nobject : 给哪个对象设置属性\nkey    : 用于取出存储值的key，一个属性对应一个key，key可以是char，double，int等。\nvalue  : 给属性设置的值\npolicy : 储存策略(assign，copy，retain)\n*/\nvoid objc_setAssociatedObject(id object , const void *key , id value , objc_AssociationPloicy policy)\n\n/**\n用key取值\n*/\nid objc_getAssociatedObject(id object , const void *key)\n```\n\n**举个栗子:**\n\n```objectivec\n//.h文件\n@property (nonatomic, copy)NSString *content;\n\n//.m文件\n\nchar contentKey;\n\n- (void)setContent:(NSString *)content {\n    objc_setAssociatedObject(self, &contentKey, content, OBJC_ASSOCIATION_COPY_NONATOMIC);\n}\n\n- (NSString *)content {\n    return objc_getAssociatedObject(self, &contentKey);\n}\n```\n\n#### 3.3 获取类的所以成员变量\n\n```objectivec\n/**\n获取类的所有成员变量\n*/\nIvar *class_copyIvarList(Class cls, unsigned int *outCount)\n\n/**\n获取成员变量的名字\n*/\nconst char *ivar_getName(Ivar v)\n\n/**\n获取成员变量的类型\n*/\nconst char *ivar_getTypeEndcoding(Ivar v)\n```\n\n**举个栗子:重写归档和解档方法**\n\n```objectivec\n//.h\n#import <Foundation/Foundation.h>\n\n@interface NSObject (Extension)\n\n- (NSArray *)ignoredNames;\n- (void)encode:(NSCoder *)aCoder;\n- (void)decode:(NSCoder *)aDecoder;\n\n@end\n\n//.m\n#import \"NSObject+Extension.h\"\n#import <objc/runtime.h>\n\n@implementation NSObject (Extension)\n\n- (void)decode:(NSCoder *)aDecoder {\n    // 一层层父类往上查找，对父类的属性执行归解档方法\n    Class c = self.class;\n    while (c &&c != [NSObject class]) {\n\n        unsigned int outCount = 0;\n        Ivar *ivars = class_copyIvarList(c, &outCount);\n        for (int i = 0; i < outCount; i++) {\n            Ivar ivar = ivars[i];\n            NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n\n            // 如果有实现该方法再去调用\n            if ([self respondsToSelector:@selector(ignoredNames)]) {\n                if ([[self ignoredNames] containsObject:key]) continue;\n            }\n\n            id value = [aDecoder decodeObjectForKey:key];\n            [self setValue:value forKey:key];\n        }\n        free(ivars);\n        c = [c superclass];\n    }\n\n}\n\n- (void)encode:(NSCoder *)aCoder {\n    // 一层层父类往上查找，对父类的属性执行归解档方法\n    Class c = self.class;\n    while (c &&c != [NSObject class]) {\n\n        unsigned int outCount = 0;\n        Ivar *ivars = class_copyIvarList([self class], &outCount);\n        for (int i = 0; i < outCount; i++) {\n            Ivar ivar = ivars[i];\n            NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n\n            // 如果有实现该方法再去调用\n            if ([self respondsToSelector:@selector(ignoredNames)]) {\n                if ([[self ignoredNames] containsObject:key]) continue;\n            }\n\n            id value = [self valueForKeyPath:key];\n            [aCoder encodeObject:value forKey:key];\n        }\n        free(ivars);\n        c = [c superclass];\n    }\n}\n@end\n```\n\n使用方法\n\n```objectivec\n// 设置需要忽略的属性\n- (NSArray *)ignoredNames {\n    return @[@\"bone\"];\n}\n\n// 在系统方法内来调用我们的方法\n- (instancetype)initWithCoder:(NSCoder *)aDecoder {\n    if (self = [super init]) {\n        [self decode:aDecoder];\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [self encode:aCoder];\n}\n```\n\n#### 3.4 替换方法实现\n\n假设现在需要一个圆角按钮，并且保证点击触发事件的范围必须要这个圆之内，那么通过一个UIButton+Runtime的扩展来替换旧有-pointInside:withEvent:方法\n\n```objectivec\n@interface UIButton(Runtime)\n\n@property (nonatomic, assign) BOOL roundTouchEnable;\n\n@end\n\n\nconst void * RoundTouchEnableKey = &RoundTouchEnableKey;\n@implementation UIButton(Runtime)\n\n- (BOOL)roundTouchEnable\n{\n    return [objc_getAssociatedObject(self, RoundTouchEnableKey) boolValue];\n}\n\n- (void)setRoundTouchEnable: (BOOL)roundTouchEnable\n{\n    objc_setAssociatedObject(self, RoundTouchEnableKey, @(roundTouchEnable), OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (BOOL)replacePointInside: (CGPoint)point withEvent: (UIEvent *)event\n{\n    if (CGRectGetWidth(self.frame) != CGRectGetHeight(self.frame) \n        || !self.roundTouchEnable)\n    {\n        return [super pointInside: point withEvent: event];\n    }\n    CGFloat radius = CGRectGetWidth(self.frame) / 2;\n    CGPoint offset = CGPointMake(point.x - radius, point.y - radius);\n    return sqrt(offset.x * offset.x + offset.y * offset.y) <= radius;\n}\n\n// 替换方法实现\n+ (void)initialize\n{\n    [super initialize];\n    Method replaceMethod = class_getInstanceMethod([self class], @selector(replacePointInside:withEvent:));\n    Method originMethod = class_getInstanceMethod([self class], @selector(pointInside:withEvent:));\n    method_setImplementation(originMethod, method_getImplementation(replaceMethod));\n}\n@end\n```\n\n## 4 Runtime消息机制 \n\n#### 4.1 C是一门动态语言\n\n* 静态语言：在运行前会进行类型判断，类的所有成员、方法都会在编译阶段确定好内存地址。类成员只能访问属于自己的方法和变量，如果方法调用错误，代码无法通过编译，会直接引起编译器报错。因此，静态语言结构规范、便于调试、且可以进行多样的性能优化。常见的静态语言包括java/C++/C等。\n* 动态语言：大部分的判断工作被推迟到运行时进行，类的成员变量、方法地址都在运行时确认。可以在运行时动态的添加类成员、方法等。具有较高的灵活性和可定制性、便于阅读，但方法通常无法进行内联等优化。\n \n>`smalltalk`是动态语言的鼻祖，更是OC发展的最大推动力。在`smalltalk`中，所有的东西都是对象（或者都应该被当做对象），例如表达式`5 + 3`被理解成向对象5发送了消息+，其中接收的参数是 3。\n\n#### 4.2 消息发送过程\n\n```objectivec\n//无参数\nobjc_msgSend(receiver, selector)\n//有参数时\nobjc_msgSend(receiver, selector, arg1, arg2, ...)\n```\n\n##### 4.2.1 消息发送总览\n\n1. 检测这个`selector` 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会`retain`,`release`这些函数了。\n2. 检测这个`target`是不是`nil`对象。ObjC的特性是允许对一个`nil`对象执行任何一个方法不会Crash，因为会被忽略掉。\n3. 如果上面两个通过，就从先`cache`里面找这个类的`IMP`，找到就直接跳到对应函数里面。\n4. 如果`cache`里面没有，就到类的方法列表中查找，然后超类的方法列表，一直到`NSObject`。\n5. 如果还说没有就要进入`动态方法`解析了。\n\n>为了高度优化性能，苹果直接使用汇编实现了这个函数（源码处于Source/objc-msg-arm.s文件下）：\n\n```objectivec\n/*****************************************************************\n *\n * id objc_msgSend(id self, SEL    _cmd,...);\n *\n *****************************************************************/\n    ENTRY objc_msgSend\n    MESSENGER_START\n\n    cbz    r0, LNilReceiver_f    // 判断消息接收者是否为nil\n\n    ldr    r9, [r0]              // r9 = self->isa\n    CacheLookup NORMAL           // 到缓存中查找方法\n\nLCacheMiss:                      // 方法未缓存\n    MESSENGER_END_SLOW\n    ldr    r9, [r0, #ISA]        \n    b    __objc_msgSend_uncached\n\nLNilReceiver:                    // 消息接收者为nil处理\n    mov    r1, #0\n    mov    r2, #0\n    mov    r3, #0\n    FP_RETURN_ZERO\n    MESSENGER_END_NIL\n    bx    lr    \n\nLMsgSendExit:\n    END_ENTRY objc_msgSend\n```\n\n##### 4.2.2 查找方法\n\n>查找方法实现是通过_class_lookupMethodAndLoadCache3这个函数完成的：\n\n```objectivec\nIMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)\n{\n    return lookUpImpOrForward(cls, sel, obj, \n                          YES/*initialize*/, NO/*cache*/, YES/*resolver*/);\n}\n\nIMP lookUpImpOrForward(Class cls, SEL sel, id inst, \n                   bool initialize, bool cache, bool resolver)\n{\n    Class curClass;\n    IMP methodPC = nil;\n    Method meth;\n    bool triedResolver = NO;\n\n    methodListLock.assertUnlocked();\n\n    // 如果传入的cache为YES，到类缓存中查找方法缓存\n    if (cache) {\n        methodPC = _cache_getImp(cls, sel);\n        if (methodPC) return methodPC;    \n    }\n\n    // 判断类是否已经被释放\n    if (cls == _class_getFreedObjectClass())\n        return (IMP) _freedHandler;\n\n    // 如果类未初始化，对其进行初始化。如果这个消息是initialize，那么直接进行类的初始化\n    if (initialize  &&  !cls->isInitialized()) {\n        _class_initialize (_class_getNonMetaClass(cls, inst));\n    }\n\n retry:\n    methodListLock.lock();\n\n    // 忽略在GC环境下的部分消息，比如retain、release等\n    if (ignoreSelector(sel)) {\n        methodPC = _cache_addIgnoredEntry(cls, sel);\n        goto done;\n    }\n\n    // 遍历缓存方法，如果找到，直接返回\n    methodPC = _cache_getImp(cls, sel);\n    if (methodPC) goto done;\n\n    // 遍历类自身的方法列表查找方法实现\n    meth = _class_getMethodNoSuper_nolock(cls, sel);\n    if (meth) {\n        log_and_fill_cache(cls, cls, meth, sel);\n        methodPC = method_getImplementation(meth);\n        goto done;\n    }\n\n    // 尝试向上遍历父类的方法列表查找实现\n    curClass = cls;\n    while ((curClass = curClass->superclass)) {\n        // Superclass cache.\n        meth = _cache_getMethod(curClass, sel, _objc_msgForward_impcache);\n        if (meth) {\n            if (meth != (Method)1) { \n                log_and_fill_cache(cls, curClass, meth, sel);\n                methodPC = method_getImplementation(meth);\n                goto done;\n            }\n            else {\n                // Found a forward:: entry in a superclass.\n                // Stop searching, but don't cache yet; call method \n                // resolver for this class first.\n                break;\n            }\n        }\n\n        // 查找父类的方法列表\n        meth = _class_getMethodNoSuper_nolock(curClass, sel);\n        if (meth) {\n            log_and_fill_cache(cls, curClass, meth, sel);\n            methodPC = method_getImplementation(meth);\n            goto done;\n        }\n    }\n\n    // 没有找到任何的方法实现，进入消息转发第一阶段“动态方法解析”\n    // 调用+ (BOOL)resolveInstanceMethod: (SEL)selector\n    // 征询接收者所属的类是否能够动态的添加这个未实现的方法来解决问题\n    if (resolver  &&  !triedResolver) {\n        methodListLock.unlock();\n        _class_resolveMethod(cls, sel, inst);\n        triedResolver = YES;\n        goto retry;\n    }\n\n    // 仍然没有找到方法实现进入消息转发第二阶段“备援接收者”\n    // 先后会调用 -(id)forwardingTargetForSelector: (SEL)selector \n    // 以及 - (void)forwardInvocation: (NSInvocation*)invocation 进行最后的补救\n    // 如果补救未成功抛出消息发送错误异常\n    _cache_addForwardEntry(cls, sel);\n    methodPC = _objc_msgForward_impcache;\n\n done:\n    methodListLock.unlock();\n\n    assert(!(ignoreSelector(sel)  &&  methodPC != (IMP)&_objc_ignored_method));\n    return methodPC;\n}\n```\n\n**以上为方法调用全部过程，主要分为三部分：**\n\n1、查找是否存在对应方法缓存，如果存在直接返回调用，为了优化性能，方法的缓存使用了散列表的方式。\n\n2、未找到缓存， 到类本身或顺着类结构向上查找方法实现，返回`method_t *`类型也就是`Method`。\n\n```objectivec\n//非加锁状态下查找方法实现\nstatic method_t * getMethodNoSuper_nolock(Class cls, SEL sel)\n{\n    runtimeLock.assertLocked();\n\n    assert(cls->isRealized());\n    // fixme nil cls? \n    // fixme nil sel?\n    for (auto mlists = cls->data()->methods.beginLists(), \n            end = cls->data()->methods.endLists(); \n             mlists != end;\n               ++mlists)\n    {\n        method_t *m = search_method_list(*mlists, sel);\n        if (m) return m;\n    }\n\n    return nil;\n}\n\n// 搜索方法列表\nstatic method_t * search_method_list(const method_list_t *mlist, SEL sel)\n{\n    int methodListIsFixedUp = mlist->isFixedUp();\n    int methodListHasExpectedSize = mlist->entsize() == sizeof(method_t);\n\n    if (__builtin_expect(methodListIsFixedUp && methodListHasExpectedSize, 1)) {\n          // 对有序数组进行线性探测\n          return findMethodInSortedMethodList(sel, mlist);\n    } else {\n        // Linear search of unsorted method list\n        for (auto& meth : *mlist) {\n            if (meth.name == sel) return &meth;\n        }\n    }\n\n#if DEBUG\n    // sanity-check negative results\n    if (mlist->isFixedUp()) {\n        for (auto& meth : *mlist) {\n            if (meth.name == sel) {\n                _objc_fatal(\"linear search worked when binary search did not\");\n            }\n        }\n    }\n#endif\n\n    return nil;\n}\n```\n\n如果在这步骤中找到方法实现，则将它加入方法缓存中。\n\n```objectivec\n// 记录并且缓存方法\nstatic void log_and_fill_cache(Class cls, IMP imp, SEL sel, id receiver, Class implementer)\n{\n#if SUPPORT_MESSAGE_LOGGING\n    if (objcMsgLogEnabled) {\n        bool cacheIt = logMessageSend(implementer->isMetaClass(), \n                                cls->nameForLogging(),\n                                implementer->nameForLogging(), \n                                sel);\n        if (!cacheIt) return;\n    }\n#endif\n    cache_fill (cls, sel, imp, receiver);\n}\n\n//在无加锁状态下缓存方法\nstatic void cache_fill_nolock(Class cls, SEL sel, IMP imp, id receiver)\n{\n    cacheUpdateLock.assertLocked();\n\n    if (!cls->isInitialized()) return;\n    if (cache_getImp(cls, sel)) return;\n\n    cache_t *cache = getCache(cls);\n    cache_key_t key = getKey(sel);\n\n    // 如果缓存占用不到3/4，进行缓存。\n    mask_t newOccupied = cache->occupied() + 1;\n    mask_t capacity = cache->capacity();\n    if (cache->isConstantEmptyCache()) {\n        cache->reallocate(capacity, capacity ?: INIT_CACHE_SIZE);\n    }\n    else if (newOccupied <= capacity / 4 * 3) {\n    }\n    else {\n        // 扩充缓存。为了性能，扩充后原有缓存方法全部移除\n        cache->expand();\n    }\n    bucket_t *bucket = cache->find(key, receiver);\n    if (bucket->key() == 0) cache->incrementOccupied();\n    bucket->set(key, imp);\n}\n```\n\n如果在类自身方法中没找到，那么循环父类方法，重复上面动作。\n\n3、如果未找到任何方法实现，则会出发消息转发机制。\n\n>消息转发分为两个阶段，第一个阶段我们可以通过动态添加方法之后让编译器再次执行查找方法实现的过程；第二个阶段称作备援的接收者，就是找到一个接盘侠来处理这个事件。\n\n```objectivec\nvoid _class_resolveMethod(Class cls, SEL sel, id inst)\n{\n    // 非beta类的情况下直接调用 resolveInstanceMethod 方法\n    if (! cls->isMetaClass()) {\n        _class_resolveInstanceMethod(cls, sel, inst);\n    } \n    else {\n        // 先调用 resolveClassMethod 请求动态添加方法\n        // 然后进行一次查找判断是否处理完成\n        // 如果没有添加，再调用 resolveInstanceMethod 方法\n        _class_resolveClassMethod(cls, sel, inst);\n        if (!lookUpImpOrNil(cls, sel, inst, \n                      NO/*initialize*/, YES/*cache*/, NO/*resolver*/)) \n        {\n            _class_resolveInstanceMethod(cls, sel, inst);\n        }\n    }\n}\n```\n\n##### 4.2.3 方法缓存\n\n>`cache`存储着我们在方法调用中需要查找的方法缓存。作为缓存方法的cache采用了散列表，以此来大幅度提高检索的速度：\n\n```objectivec\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n\nstruct cache_t {\n    struct bucket_t *_buckets;\n    mask_t _mask;\n    mask_t _occupied;\n    // functions\n}\n\n// cache method\nbuckets = (cache_entry **)cache->buckets;\nfor (index = CACHE_HASH(sel, cache->mask); \n     buckets[index] != NULL; \n     index = (index+1) & cache->mask)\n{ }\nbuckets[index] = entry;\n\n//利用sel的指针地址和mask做一个简单的位运算，然后找到一个空槽存储起来。\n```\n\n>以此推出从缓存中查找sel实现代码CacheLookup, 苹果使用汇编完成查找步骤，用以优化性能。\n\n```objectivec\n.macro CacheLookup\n\n    ldrh    r12, [r9, #CACHE_MASK]    // r12 = mask\n    ldr    r9, [r9, #CACHE]    // r9 = buckets\n.if $0 == STRET  ||  $0 == SUPER_STRET\n    and    r12, r12, r2        // r12 = index = SEL & mask\n.else\n    and    r12, r12, r1        // r12 = index = SEL & mask\n.endif\n    add    r9, r9, r12, LSL #3    // r9 = bucket = buckets+index*8\n    ldr    r12, [r9]        // r12 = bucket->sel\n2:\n.if $0 == STRET  ||  $0 == SUPER_STRET\n    teq    r12, r2\n.else\n    teq    r12, r1\n.endif\n    bne    1f\n    CacheHit $0\n1:    \n    cmp    r12, #1\n    blo    LCacheMiss_f        // if (bucket->sel == 0) cache miss\n    it    eq            // if (bucket->sel == 1) cache wrap\n    ldreq    r9, [r9, #4]        // bucket->imp is before first bucket\n    ldr    r12, [r9, #8]!        // r12 = (++bucket)->sel\n    b    2b\n\n.endmacro\n```\n\n#### 4.3 消息转发\n\n>通常情况下，调用不属于某个对象的方法的时候，应用就会崩溃crash。\n>通过方法调用源码可以看到，并不是没有找到方法实现就直接crash。\n>在crash之前编译器会进行消息转发机制，有依次有三次机会。\n\n```objectivec\n第一阶段         resolveInstanceMethod  \n(动态添加方法：添加对应方法，跳到方法实现)             \n\t\t\t\t\t\t   \n第二阶段\t\t forwardingTargetForSelector\n(最后的接盘侠：直接接管对应方法，实现方法)\n\n\t\t\t     forwardInvocation\n```\n\n1、第一阶段(resolveInstanceMethod)\n\n避免程序因为类型错误导致crash，可以通过`class_addMethod`动态添加处理方法。\n类可以在`objc_registerClassPair`完成类注册后动态添加方法，但不能动态添加属性，\n类似于`category`。\n\n```objectivec\nid wrongTypeGetter(id object, SEL sel) {\n    return nil;\n}\n\nvoid wrongTypeSetter(id object, SEL sel, id value) {\n    // do nothing\n}\n\n+ (BOOL)resolveInstanceMethod: (SEL)selector\n{\n    NSString * selName = NSStringFromSelector(selector);\n    if ([sel hasPrefix: @\"set\"]) {\n        class_addMethod(self, selector, (IMP)wrongTypeSetter, \"v@:@\");\n    } else {\n        class_addMethod(self, selector, (IMP)wrongTypeGetter, \"@@:\")\n    }\n}\n```\n\n2、第二阶段(forwardingTargetForSelector)\n\n>在iOS中不支持多继承，尽管我们可以通过协议和组合模式实现`伪多继承`。`伪多继承`和`多继承`的区别在于：`多继承`是将多个类的功能组合到一个对象当中，而`伪多继承`多个类的功能依旧分布在不同对象当中，但是对象彼此对消息发送者透明。那么，如果我们消息转发给另一个对象可以用来实现这种伪多继承。\n\n```objectivec\n@interface Person: NSObject\n\n@property (nonatomic, strong) NSNumber * age;\n\n@end\n\n@implementation Person\n\n- (id)forwardingTargetForSelector: (SEL)aSelector\n{\n    // 甚至可以通过runtime遍历自己属性找到可以响应方法的接盘侠\n    NSString * selName = NSStringFromSelector(aSelector);\n    if ([selName hasSuffix: @\"Value\"]) {\n        return self.age;\n    }\n    return nil;\n}\n\n@end\n\n// View controller\nid p = [[Person alloc] init];\n[p setAge: @(18)];\nNSLog(@\"%lu, %.2f\", [p integerValue], [p doubleValue]);    //18, 18.00\n```\n\n3、第二阶段最后(forwardInvocation)\n\n>`runtime`需要生成一个`methodSignature`变量来组装，这将通过调用消息接收者的`-(NSMethodSignature *)methodSignatureForSelector:`获取，这个变量包含了方法的参数类型、参数个数以及消息接收者等信息。接着把这个变量组装成一个NSInvocation对象进行最后一次的消息转发，调用接收者的`-forwardInvocation:`方法。我们可以对`invocation`做任何事情，包括随意修改参数值、消息接收者等。我最常拿来干的事情就是减少数组的遍历工作：\n\n```objectivec\n@implementation NSArray(Runtime)\n\n- (void)forwardInvocation: (NSInvocation *)anInvocation\n{\n    for (id item in self) {\n        if ([item respondsToSelector: anInvocation.selector]) {\n            [anInvocation invokeWithTarget: item];\n        }\n    }\n}\n\n@end\n```\n\n>NSInvocation对象封装了动态库向接收器转发执行消息所需的所有必要信息，如目标对象、方法选择器、方法参数。因此可以借助NSInvocation实例，使用内部的选择器和其他信息，在任何时候调用接收器。同一个NSInvocation实例可重复调用接收器的同一个方法，或通过不同的目标和方法签名进行复用。\n>OC中直接调用对象的消息方法有两种：\n>1.`performSelector:withObject`\n>2.NSInvocation\n>实现NSArray的map方法。可以让数组中每个元素接受消息，并且返回一个新的数组。该方法类似于`makeObjectsPerformSelector:`，不同的是map可以传送带有多个参数的消息，而且可以延伸至数组以外的集合。比如:\n\n```objectivec\nint main(int argc, const char * argv[]) {\n\tNSArray *testArray = @[@1, @2, @3];\n\tid stringArray = [[testArray map] stringValue];\n\tNSLog(@%@\", stringArray); // \"1\", \"2\", \"3\"\n}\n```\n\n**实现代码**\n\n```objectivec\n//NSArray+Map.h\n\n@interface NSArray (Map)\n- (id)map;\n@end\n\n//NSArray+Map.m\n\n@implementation NSArray (Map)\n- (id)map {\n\treturn [[NSArrayMapProxy alloc] initWithArray:self];\n}\n@end\n\n//实现NSArrayMapProxy\n//NSArrayMapProxy.h\n\n@interface NSArrayMapProxy : NSProxy {\n\tNSArray *_array;\n}\n- (instancetype)initWithArray:(NSArray *)array;\n@end\n\n//NSArrayMapProxy.m\n\n@implementation NSArrayMapProxy \n\n- (instancetype)initWithArray:(NSArray *)array {\n\t_array = array;\n\treturn self;\n}\n\n//示例中的数组array包含三个NSNumber类型的对象，于是向proxy发送stringValue消息的时候，proxy就负责将消息转发给数组中的每个元素。于是NSArrayMapProxy就需要重载NSProxy的两个方法，来实现消息转发机制。\n//1.在NSArrayMapProxy收到消息后，首先methodSignatureForSelector:会被调用，用于返回一个方法签名。\n\n//这里重载方法时，遍历数组中的元素，如果有元素响应消息，就可以通过该元素找到消息的方法签名。\n//这个函数也就是找到方法的实现，自己没有实现方法，就到别的对象中找。\n- (nullable NSMethodSignature *)methodSignatureForSelector:(SEL)sel {\n\tfor (id obj in _array) {\n\t\tif ([obj respondsToSelector:sel]) {\n\t\t\treturn [obj methodSignatureForSelector:sel];\n\t\t}\n\t}\n\n\treturn [super methodSignatureForSelector:sel];\n}\n\n//2.在得到方法签名之后，接着会调`forwardInvocation:`方法，于是可以重载方法后在这里决定消息的转发去向。\n- (void)forwardInvocation:(NSInvocation *)invocation {\n\tSEL sel = invocation.selector;\n\tNSMutableArray *mappedArray = [NSMutableArray arrayWithCapacity:_array.count];\n\tfor (id obj in _array) {\n\t\tif ([obj respondsToSelector:sel]) {\n\t\t\t//[NSInvocation invoke]方法调用\n\t\t\t[invocation invokeWithTarget:obj]; //调用数组中元素obj的stringValue方法\n\t\t\tid mappedValue; //用于存储调用返回value\n\t\t\t[invocation getReturnValue:&mappedValue];\n\t\t\t[mappedArray addObject:mapped];\n\t\t}\n\t}\n\t//设置调用[NSArrayMapProxy stringValue]的返回值\n\t[invocation setReturnValue:&mappedArray];\n}\n@end\n```\n\n>具体思路：为NSArray添加map方法，当调用map方式时，返回的是NSArrayMapProxy对象。之后调用NSArrayMapProxy对象的stringValue方法。\n>NSArrayMapProxy对象的作用就是在NSArray元素中找到sel方法的签名(就是得到stringValue的实现方法)，然后让每个元素都调用这个方法，并将返回值存储起来，得到新的NSArray。\n\n还有利用类似思路解决服务器返回NSNull问题。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Runtime.md","raw":"---\ntitle: C源码学习\nnotebook: IOSReverse\ntags:\n---\n\n## 1.理解NSObject和元类\n\n#### 1.1 在OC中的对象和类是什么\n\n1. 对象是在objc.h中定义的\n\n```objectivec\n/// An opaque type that represents an C class.\ntypedef struct objc_class *Class;\n\n/// Represents an instance of a class.\nstruct objc_object {\n    Class isa  OBJC_ISA_AVAILABILITY;\n};\n```\n\n2. 类是在runtime.h中定义的\n\n```objectivec\nstruct objc_class {\n    Class isa  OBJC_ISA_AVAILABILITY;\n\n#if !__OBJC2__\n    Class super_class                                        OBJC2_UNAVAILABLE;\n    const char *name                                         OBJC2_UNAVAILABLE;\n    long version                                             OBJC2_UNAVAILABLE;\n    long info                                                OBJC2_UNAVAILABLE;\n    long instance_size                                       OBJC2_UNAVAILABLE;\n    struct objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;\n    struct objc_method_list **methodLists                    OBJC2_UNAVAILABLE;\n    struct objc_cache *cache                                 OBJC2_UNAVAILABLE;\n    struct objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;\n#endif\n\n} OBJC2_UNAVAILABLE;\n/* Use `Class` instead of `struct objc_class *` */\n```\n\n>OC中的类和对象在源码中都是用结构体表示的。\n>本质上类并不是C语言中的类，它也是对象，也是某个类的实例，这个类称之为元类(metaclass)。\n>元类也是对象，也是某个类的实例，这个类叫根元类(root metaclass)。\n>所有元类所属类是同一个根元类。\n>根元类也是元类，所以它所属的类也是根元类，也就是它本身。\n>根元类指的就是根类(rootclass)的元类。\n>在C中有两个根类(rootclass)，一个是NSObject，一个是NSProxy。\n\n#### 1.2 isa指针和super_Class指针\n\n```bash\n                            nil\n                             ^\n                             |\n                             |\n                  isa   (NSObject)      isa                      isa\nrootclass实例   ++++++> rootclass类   ++++++> rootclass元类  <<+++++++\n                             ^   ^             |   ^              +  +\n                             |   |             |   |              +  +\n                             |   ---------------   |              +  +\n                  isa   (FatherClass)   isa                       +  +\nfatherclass实例 ++++++> fatherclass类 ++++++> fatherclass元类 ++++++   +\n                             ^                     ^                 +\n                             |                     |                 +\n                             |                     |                 +\n                  isa   (SubClass)      isa                          +\nsubclass实例    ++++++> subclass类    ++++++> subclass元类    ++++++++\n```\n\n**我的理解**\n\nrootclass元类实际上是objc_class结构体对象。当创建其subclass元类时，objc内部是将父类结构体中保存的方法，\n拷贝一份到新创建的objc_class结构提对象，此结构体对象的super_Class指针指向父类，所有子元类的isa指针都\n指向rootclass的元类(根元类)。根元类的isa指针指向自己。比较特殊的是：**根元类的super_Class指针指向根类。**\n\n而元类创建类的时候，类的类方法保存在元类中，实例方法保存在自己的类中。也都是用结构体记录。子类方法的\nisa指针指向元类，super_class指针父类。根类的super_Class指针为nil。\n\n实例类型是objc_object结构体，只有isa指针，没有super_Class指针。\n\n## 2.Runtime中常用名词\n\n#### 2.1 SEL\n \n```objectivec\ntypedef struct objc_selector *SEL;\n```\n\n>源码中没能直接找到objc_selector的定义，但是从书籍是了解到可以将SEL理解为char*指针。\n>如果我们包含函数`-(int)test{return 1;}`，然后打印`NSLog(@\"SEL = %s\",@selector(test));`\n>我们将会得到输出是:`SEL = test`\n>所以猜测`struct objc_selector`的定义为：\n\n```objectivec\nstruct objc_selector {\n    char name[64 or ...]\n    ...\n}\n```\n\n>它是objc_msgSend函数的第二个参数。在OC中用`selector`表示(Swift中是`Selector`类)\n>获取SEL方法选择器：\n\n```objectivec\n//使用Objc编译器命令@selector\nSEL sel = @selector(whatMethod)\n\n//使用Runtime系统的sel_registerName函数\nSEL sel = sel_registerName(\"whatMethod\")\n\n//使用OC方法\nSEL sel = NSSelectorFromString(@\"whatMethod\")\n```\n\n#### 2.2 id\n\n```objectivec\ntypedef struct objc_object *id;\n```\n\n#### 2.3 IMP\n\nsmalltalk是动态语言的鼻祖，更是OC发展的最大推动力。在smalltalk中，所有的东西都是对象（或者都应该被当做对象），例如表达式2 + 3被理解成向对象2发送了消息+，其中接收的参数是 3\n\n```objectivec\ntypedef id (*IMP)(id, SEL, ...);\n```\n\n>它就是一个函数指针，是有编译器生成的。指向了方法的实现。\n>`IMP`跟`block`是非常相似的东西，`IMP`可以看做是一个特殊的`block`，同样的系统提供了两者相互转换的方法：`imp_implementationWithBlock`和`imp_getBlock`。\n\n```objectivec\n+ (void)initialize\n    void (^requestBlock)(id object, SEL aSelector, id URL, id parameters) = \n        ^(id object, SEL aSelector, id URL, id parameters) {\n        // do some networking request\n    };\n    IMP requestIMP = imp_implementationWithBlock(requestBlock);\n    class_addMethod([self class], @selector(networkReuqest:parameters:), requestIMP, \"v@:@@\");\n}\n\n// View controller\n[self performSelector: @selector(networkReuqest:parameters:) withObject: URL withObject: parameters];\n```\n\n上面这段代码会crash的非常无厘头，提示EXC_BAD_ACCESS错误。因为block参数不能存在SEL!!去掉`SEL aSelector`这个参数就OK了。\n\n#### 2.4 Method\n\n```objectivec\ntypedef struct objc_method *Method;\n```\n\n>在`objc_method`中存储了方法名，方法类型和方法实现。\n\n```objectivec\n/**\nmethod_name: 方法的名字，通常我们使用@selector()的方式获取一个方法的SEL地址，这个被用来进行散列计算存储方法的IMP实现。由于SEL类型采用了散列的算法，因此如果同一个类中存在同样名字的方法，那么就会导致方法的IMP地址无法唯一化。这也是苹果不允许同名不同参数类型的方法存在的原因。\nmethod_type: 每一种数据类型有着自己对应的字符编码，method_type表示方法返回值、参数的字符编码，比如-(void)playWith:(id)的字符编码为v@:@。\n*/\nstruct objc_method {\n    SEL method_name                                          OBJC2_UNAVAILABLE;\n    char *method_types                                       OBJC2_UNAVAILABLE;\n    IMP method_imp                                           OBJC2_UNAVAILABLE;\n}                                                            OBJC2_UNAVAILABLE;\n```\n\n#### 2.5 Ivar \n\n```objectivec\ntypedef struct objc_ivar *Ivar;\n```\n\n>`Ivar`代表类中的实例变量。\n\n```objectivec\nstruct objc_ivar {\n    char *ivar_name                                          OBJC2_UNAVAILABLE;\n    char *ivar_type                                          OBJC2_UNAVAILABLE;\n    int ivar_offset                                          OBJC2_UNAVAILABLE;\n#ifdef __LP64__\n    int space                                                OBJC2_UNAVAILABLE;\n#endif\n}                                                            OBJC2_UNAVAILABLE;\n```\n\n#### 2.6 Property\n\n```objectivec\ntypedef struct objc_property *Property;\ntypedef struct objc_property *objc_property_t;//这个更常用\n```\n\n>`@property`标记了类中的属性，是指向`objc_property`结构体的指针。\n\n```objectivec\nstruct objc_property {\n    const char *name;\n    const char *attributes;\n};\n```\n\n#### 2.7 Cache\n\n```objectivec\ntypedef struct objc_cache *Cache\n```\n\n>Cache为方法调用的性能进行优化。\n\n```objectivec\nstruct objc_cache {\n    unsigned int mask /* total = mask + 1 */                 OBJC2_UNAVAILABLE;\n    unsigned int occupied                                    OBJC2_UNAVAILABLE;\n    Method buckets[1]                                        OBJC2_UNAVAILABLE;\n};\n```\n\n## 3.Runtime中方法使用\n\n#### 3.1 交换两个方法实现\n\n```objectivec\n//获取某个类的类方法\nMethod class_getClassMethod(Class cls , SEL name)\n\n//获取某个类的实例方法\nMethod class_getInstanceMethod(Class cls , SEL name)\n\n//交换两个方法的实现\nvoid method_exchangeImplementations(Method m1 , Method m2)\n```\n\n**实例**\n\n**交换类方法**\n\n```objectivec\nMethod m1 = class_getClassMethod([SomeClass class], @selector(method1))\nMethod m2 = class_getClassMethod([SomeClass class], @selector(method2))\n\nmethod_exchangeImplementations(m1, m2)\n```\n\n**拦截系统方法**\n\n1、为UIImage创建分类，自定义xd_imageNamed:用于拦截系统方法。\n\n```objectivec\n+ (UIImage *)xd_imageNamed:(NSString *)name {\n    double version = [[UIDevice currentDevice].systemVersion doubleValue];\n    if (version >= 7.0) {\n        // 如果系统版本是7.0以上，使用另外一套文件名结尾是‘_os7’的扁平化图片\n        name = [name stringByAppendingString:@\"_os7\"];\n    }\n    //这里因为系统方法名已经变成我们自定义的方法，所以这里要将实际要调用的\n    //imageNamed:换成我们自定义的方法才能调到系统的imageNamed:\n    return [UIImage xd_imageNamed:name];\n}\n```\n\n2、在分类中重写UIImage的load方法，实现方法交换。\n\n```objectivec\n+ (void)load {\n    // 获取两个类的类方法\n    Method m1 = class_getClassMethod([UIImage class], @selector(imageNamed:));\n    Method m2 = class_getClassMethod([UIImage class], @selector(xd_imageNamed:));\n    // 开始交换方法实现\n    method_exchangeImplementations(m1, m2);\n}\n```\n\n#### 3.2 给分类添加属性\n\n>在分类中是无法设置属性的，因为在分类声明中写`@property`只能生成get和set方法的声明，但是\n>无法生成成员变量。如果使用成员变量，比如:\n\n```objectivec\nint _num\n\n- (int)num {\n    return _num;\n}\n\n- (void)setnum:(int)num {\n    _num = num;\n}\n\n//但是全局变量程序整个执行过程中内存里只有一份，当我创建多个对象\n//修改的都是同一个值。\n```\n\n**属性关联**\n\n```objectivec\n/**\n将值value和对象object关联起来(将值存储到对象中)\nobject : 给哪个对象设置属性\nkey    : 用于取出存储值的key，一个属性对应一个key，key可以是char，double，int等。\nvalue  : 给属性设置的值\npolicy : 储存策略(assign，copy，retain)\n*/\nvoid objc_setAssociatedObject(id object , const void *key , id value , objc_AssociationPloicy policy)\n\n/**\n用key取值\n*/\nid objc_getAssociatedObject(id object , const void *key)\n```\n\n**举个栗子:**\n\n```objectivec\n//.h文件\n@property (nonatomic, copy)NSString *content;\n\n//.m文件\n\nchar contentKey;\n\n- (void)setContent:(NSString *)content {\n    objc_setAssociatedObject(self, &contentKey, content, OBJC_ASSOCIATION_COPY_NONATOMIC);\n}\n\n- (NSString *)content {\n    return objc_getAssociatedObject(self, &contentKey);\n}\n```\n\n#### 3.3 获取类的所以成员变量\n\n```objectivec\n/**\n获取类的所有成员变量\n*/\nIvar *class_copyIvarList(Class cls, unsigned int *outCount)\n\n/**\n获取成员变量的名字\n*/\nconst char *ivar_getName(Ivar v)\n\n/**\n获取成员变量的类型\n*/\nconst char *ivar_getTypeEndcoding(Ivar v)\n```\n\n**举个栗子:重写归档和解档方法**\n\n```objectivec\n//.h\n#import <Foundation/Foundation.h>\n\n@interface NSObject (Extension)\n\n- (NSArray *)ignoredNames;\n- (void)encode:(NSCoder *)aCoder;\n- (void)decode:(NSCoder *)aDecoder;\n\n@end\n\n//.m\n#import \"NSObject+Extension.h\"\n#import <objc/runtime.h>\n\n@implementation NSObject (Extension)\n\n- (void)decode:(NSCoder *)aDecoder {\n    // 一层层父类往上查找，对父类的属性执行归解档方法\n    Class c = self.class;\n    while (c &&c != [NSObject class]) {\n\n        unsigned int outCount = 0;\n        Ivar *ivars = class_copyIvarList(c, &outCount);\n        for (int i = 0; i < outCount; i++) {\n            Ivar ivar = ivars[i];\n            NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n\n            // 如果有实现该方法再去调用\n            if ([self respondsToSelector:@selector(ignoredNames)]) {\n                if ([[self ignoredNames] containsObject:key]) continue;\n            }\n\n            id value = [aDecoder decodeObjectForKey:key];\n            [self setValue:value forKey:key];\n        }\n        free(ivars);\n        c = [c superclass];\n    }\n\n}\n\n- (void)encode:(NSCoder *)aCoder {\n    // 一层层父类往上查找，对父类的属性执行归解档方法\n    Class c = self.class;\n    while (c &&c != [NSObject class]) {\n\n        unsigned int outCount = 0;\n        Ivar *ivars = class_copyIvarList([self class], &outCount);\n        for (int i = 0; i < outCount; i++) {\n            Ivar ivar = ivars[i];\n            NSString *key = [NSString stringWithUTF8String:ivar_getName(ivar)];\n\n            // 如果有实现该方法再去调用\n            if ([self respondsToSelector:@selector(ignoredNames)]) {\n                if ([[self ignoredNames] containsObject:key]) continue;\n            }\n\n            id value = [self valueForKeyPath:key];\n            [aCoder encodeObject:value forKey:key];\n        }\n        free(ivars);\n        c = [c superclass];\n    }\n}\n@end\n```\n\n使用方法\n\n```objectivec\n// 设置需要忽略的属性\n- (NSArray *)ignoredNames {\n    return @[@\"bone\"];\n}\n\n// 在系统方法内来调用我们的方法\n- (instancetype)initWithCoder:(NSCoder *)aDecoder {\n    if (self = [super init]) {\n        [self decode:aDecoder];\n    }\n    return self;\n}\n\n- (void)encodeWithCoder:(NSCoder *)aCoder {\n    [self encode:aCoder];\n}\n```\n\n#### 3.4 替换方法实现\n\n假设现在需要一个圆角按钮，并且保证点击触发事件的范围必须要这个圆之内，那么通过一个UIButton+Runtime的扩展来替换旧有-pointInside:withEvent:方法\n\n```objectivec\n@interface UIButton(Runtime)\n\n@property (nonatomic, assign) BOOL roundTouchEnable;\n\n@end\n\n\nconst void * RoundTouchEnableKey = &RoundTouchEnableKey;\n@implementation UIButton(Runtime)\n\n- (BOOL)roundTouchEnable\n{\n    return [objc_getAssociatedObject(self, RoundTouchEnableKey) boolValue];\n}\n\n- (void)setRoundTouchEnable: (BOOL)roundTouchEnable\n{\n    objc_setAssociatedObject(self, RoundTouchEnableKey, @(roundTouchEnable), OBJC_ASSOCIATION_RETAIN_NONATOMIC);\n}\n\n- (BOOL)replacePointInside: (CGPoint)point withEvent: (UIEvent *)event\n{\n    if (CGRectGetWidth(self.frame) != CGRectGetHeight(self.frame) \n        || !self.roundTouchEnable)\n    {\n        return [super pointInside: point withEvent: event];\n    }\n    CGFloat radius = CGRectGetWidth(self.frame) / 2;\n    CGPoint offset = CGPointMake(point.x - radius, point.y - radius);\n    return sqrt(offset.x * offset.x + offset.y * offset.y) <= radius;\n}\n\n// 替换方法实现\n+ (void)initialize\n{\n    [super initialize];\n    Method replaceMethod = class_getInstanceMethod([self class], @selector(replacePointInside:withEvent:));\n    Method originMethod = class_getInstanceMethod([self class], @selector(pointInside:withEvent:));\n    method_setImplementation(originMethod, method_getImplementation(replaceMethod));\n}\n@end\n```\n\n## 4 Runtime消息机制 \n\n#### 4.1 C是一门动态语言\n\n* 静态语言：在运行前会进行类型判断，类的所有成员、方法都会在编译阶段确定好内存地址。类成员只能访问属于自己的方法和变量，如果方法调用错误，代码无法通过编译，会直接引起编译器报错。因此，静态语言结构规范、便于调试、且可以进行多样的性能优化。常见的静态语言包括java/C++/C等。\n* 动态语言：大部分的判断工作被推迟到运行时进行，类的成员变量、方法地址都在运行时确认。可以在运行时动态的添加类成员、方法等。具有较高的灵活性和可定制性、便于阅读，但方法通常无法进行内联等优化。\n \n>`smalltalk`是动态语言的鼻祖，更是OC发展的最大推动力。在`smalltalk`中，所有的东西都是对象（或者都应该被当做对象），例如表达式`5 + 3`被理解成向对象5发送了消息+，其中接收的参数是 3。\n\n#### 4.2 消息发送过程\n\n```objectivec\n//无参数\nobjc_msgSend(receiver, selector)\n//有参数时\nobjc_msgSend(receiver, selector, arg1, arg2, ...)\n```\n\n##### 4.2.1 消息发送总览\n\n1. 检测这个`selector` 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会`retain`,`release`这些函数了。\n2. 检测这个`target`是不是`nil`对象。ObjC的特性是允许对一个`nil`对象执行任何一个方法不会Crash，因为会被忽略掉。\n3. 如果上面两个通过，就从先`cache`里面找这个类的`IMP`，找到就直接跳到对应函数里面。\n4. 如果`cache`里面没有，就到类的方法列表中查找，然后超类的方法列表，一直到`NSObject`。\n5. 如果还说没有就要进入`动态方法`解析了。\n\n>为了高度优化性能，苹果直接使用汇编实现了这个函数（源码处于Source/objc-msg-arm.s文件下）：\n\n```objectivec\n/*****************************************************************\n *\n * id objc_msgSend(id self, SEL    _cmd,...);\n *\n *****************************************************************/\n    ENTRY objc_msgSend\n    MESSENGER_START\n\n    cbz    r0, LNilReceiver_f    // 判断消息接收者是否为nil\n\n    ldr    r9, [r0]              // r9 = self->isa\n    CacheLookup NORMAL           // 到缓存中查找方法\n\nLCacheMiss:                      // 方法未缓存\n    MESSENGER_END_SLOW\n    ldr    r9, [r0, #ISA]        \n    b    __objc_msgSend_uncached\n\nLNilReceiver:                    // 消息接收者为nil处理\n    mov    r1, #0\n    mov    r2, #0\n    mov    r3, #0\n    FP_RETURN_ZERO\n    MESSENGER_END_NIL\n    bx    lr    \n\nLMsgSendExit:\n    END_ENTRY objc_msgSend\n```\n\n##### 4.2.2 查找方法\n\n>查找方法实现是通过_class_lookupMethodAndLoadCache3这个函数完成的：\n\n```objectivec\nIMP _class_lookupMethodAndLoadCache3(id obj, SEL sel, Class cls)\n{\n    return lookUpImpOrForward(cls, sel, obj, \n                          YES/*initialize*/, NO/*cache*/, YES/*resolver*/);\n}\n\nIMP lookUpImpOrForward(Class cls, SEL sel, id inst, \n                   bool initialize, bool cache, bool resolver)\n{\n    Class curClass;\n    IMP methodPC = nil;\n    Method meth;\n    bool triedResolver = NO;\n\n    methodListLock.assertUnlocked();\n\n    // 如果传入的cache为YES，到类缓存中查找方法缓存\n    if (cache) {\n        methodPC = _cache_getImp(cls, sel);\n        if (methodPC) return methodPC;    \n    }\n\n    // 判断类是否已经被释放\n    if (cls == _class_getFreedObjectClass())\n        return (IMP) _freedHandler;\n\n    // 如果类未初始化，对其进行初始化。如果这个消息是initialize，那么直接进行类的初始化\n    if (initialize  &&  !cls->isInitialized()) {\n        _class_initialize (_class_getNonMetaClass(cls, inst));\n    }\n\n retry:\n    methodListLock.lock();\n\n    // 忽略在GC环境下的部分消息，比如retain、release等\n    if (ignoreSelector(sel)) {\n        methodPC = _cache_addIgnoredEntry(cls, sel);\n        goto done;\n    }\n\n    // 遍历缓存方法，如果找到，直接返回\n    methodPC = _cache_getImp(cls, sel);\n    if (methodPC) goto done;\n\n    // 遍历类自身的方法列表查找方法实现\n    meth = _class_getMethodNoSuper_nolock(cls, sel);\n    if (meth) {\n        log_and_fill_cache(cls, cls, meth, sel);\n        methodPC = method_getImplementation(meth);\n        goto done;\n    }\n\n    // 尝试向上遍历父类的方法列表查找实现\n    curClass = cls;\n    while ((curClass = curClass->superclass)) {\n        // Superclass cache.\n        meth = _cache_getMethod(curClass, sel, _objc_msgForward_impcache);\n        if (meth) {\n            if (meth != (Method)1) { \n                log_and_fill_cache(cls, curClass, meth, sel);\n                methodPC = method_getImplementation(meth);\n                goto done;\n            }\n            else {\n                // Found a forward:: entry in a superclass.\n                // Stop searching, but don't cache yet; call method \n                // resolver for this class first.\n                break;\n            }\n        }\n\n        // 查找父类的方法列表\n        meth = _class_getMethodNoSuper_nolock(curClass, sel);\n        if (meth) {\n            log_and_fill_cache(cls, curClass, meth, sel);\n            methodPC = method_getImplementation(meth);\n            goto done;\n        }\n    }\n\n    // 没有找到任何的方法实现，进入消息转发第一阶段“动态方法解析”\n    // 调用+ (BOOL)resolveInstanceMethod: (SEL)selector\n    // 征询接收者所属的类是否能够动态的添加这个未实现的方法来解决问题\n    if (resolver  &&  !triedResolver) {\n        methodListLock.unlock();\n        _class_resolveMethod(cls, sel, inst);\n        triedResolver = YES;\n        goto retry;\n    }\n\n    // 仍然没有找到方法实现进入消息转发第二阶段“备援接收者”\n    // 先后会调用 -(id)forwardingTargetForSelector: (SEL)selector \n    // 以及 - (void)forwardInvocation: (NSInvocation*)invocation 进行最后的补救\n    // 如果补救未成功抛出消息发送错误异常\n    _cache_addForwardEntry(cls, sel);\n    methodPC = _objc_msgForward_impcache;\n\n done:\n    methodListLock.unlock();\n\n    assert(!(ignoreSelector(sel)  &&  methodPC != (IMP)&_objc_ignored_method));\n    return methodPC;\n}\n```\n\n**以上为方法调用全部过程，主要分为三部分：**\n\n1、查找是否存在对应方法缓存，如果存在直接返回调用，为了优化性能，方法的缓存使用了散列表的方式。\n\n2、未找到缓存， 到类本身或顺着类结构向上查找方法实现，返回`method_t *`类型也就是`Method`。\n\n```objectivec\n//非加锁状态下查找方法实现\nstatic method_t * getMethodNoSuper_nolock(Class cls, SEL sel)\n{\n    runtimeLock.assertLocked();\n\n    assert(cls->isRealized());\n    // fixme nil cls? \n    // fixme nil sel?\n    for (auto mlists = cls->data()->methods.beginLists(), \n            end = cls->data()->methods.endLists(); \n             mlists != end;\n               ++mlists)\n    {\n        method_t *m = search_method_list(*mlists, sel);\n        if (m) return m;\n    }\n\n    return nil;\n}\n\n// 搜索方法列表\nstatic method_t * search_method_list(const method_list_t *mlist, SEL sel)\n{\n    int methodListIsFixedUp = mlist->isFixedUp();\n    int methodListHasExpectedSize = mlist->entsize() == sizeof(method_t);\n\n    if (__builtin_expect(methodListIsFixedUp && methodListHasExpectedSize, 1)) {\n          // 对有序数组进行线性探测\n          return findMethodInSortedMethodList(sel, mlist);\n    } else {\n        // Linear search of unsorted method list\n        for (auto& meth : *mlist) {\n            if (meth.name == sel) return &meth;\n        }\n    }\n\n#if DEBUG\n    // sanity-check negative results\n    if (mlist->isFixedUp()) {\n        for (auto& meth : *mlist) {\n            if (meth.name == sel) {\n                _objc_fatal(\"linear search worked when binary search did not\");\n            }\n        }\n    }\n#endif\n\n    return nil;\n}\n```\n\n如果在这步骤中找到方法实现，则将它加入方法缓存中。\n\n```objectivec\n// 记录并且缓存方法\nstatic void log_and_fill_cache(Class cls, IMP imp, SEL sel, id receiver, Class implementer)\n{\n#if SUPPORT_MESSAGE_LOGGING\n    if (objcMsgLogEnabled) {\n        bool cacheIt = logMessageSend(implementer->isMetaClass(), \n                                cls->nameForLogging(),\n                                implementer->nameForLogging(), \n                                sel);\n        if (!cacheIt) return;\n    }\n#endif\n    cache_fill (cls, sel, imp, receiver);\n}\n\n//在无加锁状态下缓存方法\nstatic void cache_fill_nolock(Class cls, SEL sel, IMP imp, id receiver)\n{\n    cacheUpdateLock.assertLocked();\n\n    if (!cls->isInitialized()) return;\n    if (cache_getImp(cls, sel)) return;\n\n    cache_t *cache = getCache(cls);\n    cache_key_t key = getKey(sel);\n\n    // 如果缓存占用不到3/4，进行缓存。\n    mask_t newOccupied = cache->occupied() + 1;\n    mask_t capacity = cache->capacity();\n    if (cache->isConstantEmptyCache()) {\n        cache->reallocate(capacity, capacity ?: INIT_CACHE_SIZE);\n    }\n    else if (newOccupied <= capacity / 4 * 3) {\n    }\n    else {\n        // 扩充缓存。为了性能，扩充后原有缓存方法全部移除\n        cache->expand();\n    }\n    bucket_t *bucket = cache->find(key, receiver);\n    if (bucket->key() == 0) cache->incrementOccupied();\n    bucket->set(key, imp);\n}\n```\n\n如果在类自身方法中没找到，那么循环父类方法，重复上面动作。\n\n3、如果未找到任何方法实现，则会出发消息转发机制。\n\n>消息转发分为两个阶段，第一个阶段我们可以通过动态添加方法之后让编译器再次执行查找方法实现的过程；第二个阶段称作备援的接收者，就是找到一个接盘侠来处理这个事件。\n\n```objectivec\nvoid _class_resolveMethod(Class cls, SEL sel, id inst)\n{\n    // 非beta类的情况下直接调用 resolveInstanceMethod 方法\n    if (! cls->isMetaClass()) {\n        _class_resolveInstanceMethod(cls, sel, inst);\n    } \n    else {\n        // 先调用 resolveClassMethod 请求动态添加方法\n        // 然后进行一次查找判断是否处理完成\n        // 如果没有添加，再调用 resolveInstanceMethod 方法\n        _class_resolveClassMethod(cls, sel, inst);\n        if (!lookUpImpOrNil(cls, sel, inst, \n                      NO/*initialize*/, YES/*cache*/, NO/*resolver*/)) \n        {\n            _class_resolveInstanceMethod(cls, sel, inst);\n        }\n    }\n}\n```\n\n##### 4.2.3 方法缓存\n\n>`cache`存储着我们在方法调用中需要查找的方法缓存。作为缓存方法的cache采用了散列表，以此来大幅度提高检索的速度：\n\n```objectivec\n#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)>>2) & (mask))\n\nstruct cache_t {\n    struct bucket_t *_buckets;\n    mask_t _mask;\n    mask_t _occupied;\n    // functions\n}\n\n// cache method\nbuckets = (cache_entry **)cache->buckets;\nfor (index = CACHE_HASH(sel, cache->mask); \n     buckets[index] != NULL; \n     index = (index+1) & cache->mask)\n{ }\nbuckets[index] = entry;\n\n//利用sel的指针地址和mask做一个简单的位运算，然后找到一个空槽存储起来。\n```\n\n>以此推出从缓存中查找sel实现代码CacheLookup, 苹果使用汇编完成查找步骤，用以优化性能。\n\n```objectivec\n.macro CacheLookup\n\n    ldrh    r12, [r9, #CACHE_MASK]    // r12 = mask\n    ldr    r9, [r9, #CACHE]    // r9 = buckets\n.if $0 == STRET  ||  $0 == SUPER_STRET\n    and    r12, r12, r2        // r12 = index = SEL & mask\n.else\n    and    r12, r12, r1        // r12 = index = SEL & mask\n.endif\n    add    r9, r9, r12, LSL #3    // r9 = bucket = buckets+index*8\n    ldr    r12, [r9]        // r12 = bucket->sel\n2:\n.if $0 == STRET  ||  $0 == SUPER_STRET\n    teq    r12, r2\n.else\n    teq    r12, r1\n.endif\n    bne    1f\n    CacheHit $0\n1:    \n    cmp    r12, #1\n    blo    LCacheMiss_f        // if (bucket->sel == 0) cache miss\n    it    eq            // if (bucket->sel == 1) cache wrap\n    ldreq    r9, [r9, #4]        // bucket->imp is before first bucket\n    ldr    r12, [r9, #8]!        // r12 = (++bucket)->sel\n    b    2b\n\n.endmacro\n```\n\n#### 4.3 消息转发\n\n>通常情况下，调用不属于某个对象的方法的时候，应用就会崩溃crash。\n>通过方法调用源码可以看到，并不是没有找到方法实现就直接crash。\n>在crash之前编译器会进行消息转发机制，有依次有三次机会。\n\n```objectivec\n第一阶段         resolveInstanceMethod  \n(动态添加方法：添加对应方法，跳到方法实现)             \n\t\t\t\t\t\t   \n第二阶段\t\t forwardingTargetForSelector\n(最后的接盘侠：直接接管对应方法，实现方法)\n\n\t\t\t     forwardInvocation\n```\n\n1、第一阶段(resolveInstanceMethod)\n\n避免程序因为类型错误导致crash，可以通过`class_addMethod`动态添加处理方法。\n类可以在`objc_registerClassPair`完成类注册后动态添加方法，但不能动态添加属性，\n类似于`category`。\n\n```objectivec\nid wrongTypeGetter(id object, SEL sel) {\n    return nil;\n}\n\nvoid wrongTypeSetter(id object, SEL sel, id value) {\n    // do nothing\n}\n\n+ (BOOL)resolveInstanceMethod: (SEL)selector\n{\n    NSString * selName = NSStringFromSelector(selector);\n    if ([sel hasPrefix: @\"set\"]) {\n        class_addMethod(self, selector, (IMP)wrongTypeSetter, \"v@:@\");\n    } else {\n        class_addMethod(self, selector, (IMP)wrongTypeGetter, \"@@:\")\n    }\n}\n```\n\n2、第二阶段(forwardingTargetForSelector)\n\n>在iOS中不支持多继承，尽管我们可以通过协议和组合模式实现`伪多继承`。`伪多继承`和`多继承`的区别在于：`多继承`是将多个类的功能组合到一个对象当中，而`伪多继承`多个类的功能依旧分布在不同对象当中，但是对象彼此对消息发送者透明。那么，如果我们消息转发给另一个对象可以用来实现这种伪多继承。\n\n```objectivec\n@interface Person: NSObject\n\n@property (nonatomic, strong) NSNumber * age;\n\n@end\n\n@implementation Person\n\n- (id)forwardingTargetForSelector: (SEL)aSelector\n{\n    // 甚至可以通过runtime遍历自己属性找到可以响应方法的接盘侠\n    NSString * selName = NSStringFromSelector(aSelector);\n    if ([selName hasSuffix: @\"Value\"]) {\n        return self.age;\n    }\n    return nil;\n}\n\n@end\n\n// View controller\nid p = [[Person alloc] init];\n[p setAge: @(18)];\nNSLog(@\"%lu, %.2f\", [p integerValue], [p doubleValue]);    //18, 18.00\n```\n\n3、第二阶段最后(forwardInvocation)\n\n>`runtime`需要生成一个`methodSignature`变量来组装，这将通过调用消息接收者的`-(NSMethodSignature *)methodSignatureForSelector:`获取，这个变量包含了方法的参数类型、参数个数以及消息接收者等信息。接着把这个变量组装成一个NSInvocation对象进行最后一次的消息转发，调用接收者的`-forwardInvocation:`方法。我们可以对`invocation`做任何事情，包括随意修改参数值、消息接收者等。我最常拿来干的事情就是减少数组的遍历工作：\n\n```objectivec\n@implementation NSArray(Runtime)\n\n- (void)forwardInvocation: (NSInvocation *)anInvocation\n{\n    for (id item in self) {\n        if ([item respondsToSelector: anInvocation.selector]) {\n            [anInvocation invokeWithTarget: item];\n        }\n    }\n}\n\n@end\n```\n\n>NSInvocation对象封装了动态库向接收器转发执行消息所需的所有必要信息，如目标对象、方法选择器、方法参数。因此可以借助NSInvocation实例，使用内部的选择器和其他信息，在任何时候调用接收器。同一个NSInvocation实例可重复调用接收器的同一个方法，或通过不同的目标和方法签名进行复用。\n>OC中直接调用对象的消息方法有两种：\n>1.`performSelector:withObject`\n>2.NSInvocation\n>实现NSArray的map方法。可以让数组中每个元素接受消息，并且返回一个新的数组。该方法类似于`makeObjectsPerformSelector:`，不同的是map可以传送带有多个参数的消息，而且可以延伸至数组以外的集合。比如:\n\n```objectivec\nint main(int argc, const char * argv[]) {\n\tNSArray *testArray = @[@1, @2, @3];\n\tid stringArray = [[testArray map] stringValue];\n\tNSLog(@%@\", stringArray); // \"1\", \"2\", \"3\"\n}\n```\n\n**实现代码**\n\n```objectivec\n//NSArray+Map.h\n\n@interface NSArray (Map)\n- (id)map;\n@end\n\n//NSArray+Map.m\n\n@implementation NSArray (Map)\n- (id)map {\n\treturn [[NSArrayMapProxy alloc] initWithArray:self];\n}\n@end\n\n//实现NSArrayMapProxy\n//NSArrayMapProxy.h\n\n@interface NSArrayMapProxy : NSProxy {\n\tNSArray *_array;\n}\n- (instancetype)initWithArray:(NSArray *)array;\n@end\n\n//NSArrayMapProxy.m\n\n@implementation NSArrayMapProxy \n\n- (instancetype)initWithArray:(NSArray *)array {\n\t_array = array;\n\treturn self;\n}\n\n//示例中的数组array包含三个NSNumber类型的对象，于是向proxy发送stringValue消息的时候，proxy就负责将消息转发给数组中的每个元素。于是NSArrayMapProxy就需要重载NSProxy的两个方法，来实现消息转发机制。\n//1.在NSArrayMapProxy收到消息后，首先methodSignatureForSelector:会被调用，用于返回一个方法签名。\n\n//这里重载方法时，遍历数组中的元素，如果有元素响应消息，就可以通过该元素找到消息的方法签名。\n//这个函数也就是找到方法的实现，自己没有实现方法，就到别的对象中找。\n- (nullable NSMethodSignature *)methodSignatureForSelector:(SEL)sel {\n\tfor (id obj in _array) {\n\t\tif ([obj respondsToSelector:sel]) {\n\t\t\treturn [obj methodSignatureForSelector:sel];\n\t\t}\n\t}\n\n\treturn [super methodSignatureForSelector:sel];\n}\n\n//2.在得到方法签名之后，接着会调`forwardInvocation:`方法，于是可以重载方法后在这里决定消息的转发去向。\n- (void)forwardInvocation:(NSInvocation *)invocation {\n\tSEL sel = invocation.selector;\n\tNSMutableArray *mappedArray = [NSMutableArray arrayWithCapacity:_array.count];\n\tfor (id obj in _array) {\n\t\tif ([obj respondsToSelector:sel]) {\n\t\t\t//[NSInvocation invoke]方法调用\n\t\t\t[invocation invokeWithTarget:obj]; //调用数组中元素obj的stringValue方法\n\t\t\tid mappedValue; //用于存储调用返回value\n\t\t\t[invocation getReturnValue:&mappedValue];\n\t\t\t[mappedArray addObject:mapped];\n\t\t}\n\t}\n\t//设置调用[NSArrayMapProxy stringValue]的返回值\n\t[invocation setReturnValue:&mappedArray];\n}\n@end\n```\n\n>具体思路：为NSArray添加map方法，当调用map方式时，返回的是NSArrayMapProxy对象。之后调用NSArrayMapProxy对象的stringValue方法。\n>NSArrayMapProxy对象的作用就是在NSArray元素中找到sel方法的签名(就是得到stringValue的实现方法)，然后让每个元素都调用这个方法，并将返回值存储起来，得到新的NSArray。\n\n还有利用类似思路解决服务器返回NSNull问题。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Runtime","published":1,"date":"2016-09-14T09:12:21.000Z","updated":"2016-10-19T09:31:22.000Z","_id":"ciugicy0z0002zc3j2gxq8lfw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-理解NSObject和元类\"><a href=\"#1-理解NSObject和元类\" class=\"headerlink\" title=\"1.理解NSObject和元类\"></a>1.理解NSObject和元类</h2><h4 id=\"1-1-在OC中的对象和类是什么\"><a href=\"#1-1-在OC中的对象和类是什么\" class=\"headerlink\" title=\"1.1 在OC中的对象和类是什么\"></a>1.1 在OC中的对象和类是什么</h4><ol>\n<li>对象是在objc.h中定义的</li>\n</ol>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// An opaque type that represents an C class.</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/// Represents an instance of a class.</span></div><div class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>类是在runtime.h中定义的</li>\n</ol>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"comment\">/* Use `Class` instead of `struct objc_class *` */</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>OC中的类和对象在源码中都是用结构体表示的。<br>本质上类并不是C语言中的类，它也是对象，也是某个类的实例，这个类称之为元类(metaclass)。<br>元类也是对象，也是某个类的实例，这个类叫根元类(root metaclass)。<br>所有元类所属类是同一个根元类。<br>根元类也是元类，所以它所属的类也是根元类，也就是它本身。<br>根元类指的就是根类(rootclass)的元类。<br>在C中有两个根类(rootclass)，一个是NSObject，一个是NSProxy。</p>\n</blockquote>\n<h4 id=\"1-2-isa指针和super-Class指针\"><a href=\"#1-2-isa指针和super-Class指针\" class=\"headerlink\" title=\"1.2 isa指针和super_Class指针\"></a>1.2 isa指针和super_Class指针</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">                            nil</div><div class=\"line\">                             ^</div><div class=\"line\">                             |</div><div class=\"line\">                             |</div><div class=\"line\">                  isa   (NSObject)      isa                      isa</div><div class=\"line\">rootclass实例   ++++++&gt; rootclass类   ++++++&gt; rootclass元类  &lt;&lt;+++++++</div><div class=\"line\">                             ^   ^             |   ^              +  +</div><div class=\"line\">                             |   |             |   |              +  +</div><div class=\"line\">                             |   ---------------   |              +  +</div><div class=\"line\">                  isa   (FatherClass)   isa                       +  +</div><div class=\"line\">fatherclass实例 ++++++&gt; fatherclass类 ++++++&gt; fatherclass元类 ++++++   +</div><div class=\"line\">                             ^                     ^                 +</div><div class=\"line\">                             |                     |                 +</div><div class=\"line\">                             |                     |                 +</div><div class=\"line\">                  isa   (SubClass)      isa                          +</div><div class=\"line\">subclass实例    ++++++&gt; subclass类    ++++++&gt; subclass元类    ++++++++</div></pre></td></tr></table></figure>\n<p><strong>我的理解</strong></p>\n<p>rootclass元类实际上是objc_class结构体对象。当创建其subclass元类时，objc内部是将父类结构体中保存的方法，<br>拷贝一份到新创建的objc_class结构提对象，此结构体对象的super_Class指针指向父类，所有子元类的isa指针都<br>指向rootclass的元类(根元类)。根元类的isa指针指向自己。比较特殊的是：<strong>根元类的super_Class指针指向根类。</strong></p>\n<p>而元类创建类的时候，类的类方法保存在元类中，实例方法保存在自己的类中。也都是用结构体记录。子类方法的<br>isa指针指向元类，super_class指针父类。根类的super_Class指针为nil。</p>\n<p>实例类型是objc_object结构体，只有isa指针，没有super_Class指针。</p>\n<h2 id=\"2-Runtime中常用名词\"><a href=\"#2-Runtime中常用名词\" class=\"headerlink\" title=\"2.Runtime中常用名词\"></a>2.Runtime中常用名词</h2><h4 id=\"2-1-SEL\"><a href=\"#2-1-SEL\" class=\"headerlink\" title=\"2.1 SEL\"></a>2.1 SEL</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector *SEL;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>源码中没能直接找到objc_selector的定义，但是从书籍是了解到可以将SEL理解为char*指针。<br>如果我们包含函数<code>-(int)test{return 1;}</code>，然后打印<code>NSLog(@&quot;SEL = %s&quot;,@selector(test));</code><br>我们将会得到输出是:<code>SEL = test</code><br>所以猜测<code>struct objc_selector</code>的定义为：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_selector &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">64</span> or ...]</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>它是objc_msgSend函数的第二个参数。在OC中用<code>selector</code>表示(Swift中是<code>Selector</code>类)<br>获取SEL方法选择器：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用Objc编译器命令@selector</span></div><div class=\"line\">SEL sel = <span class=\"keyword\">@selector</span>(whatMethod)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用Runtime系统的sel_registerName函数</span></div><div class=\"line\">SEL sel = sel_registerName(<span class=\"string\">\"whatMethod\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用OC方法</span></div><div class=\"line\">SEL sel = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"string\">@\"whatMethod\"</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"2-2-id\"><a href=\"#2-2-id\" class=\"headerlink\" title=\"2.2 id\"></a>2.2 id</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object *<span class=\"keyword\">id</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"2-3-IMP\"><a href=\"#2-3-IMP\" class=\"headerlink\" title=\"2.3 IMP\"></a>2.3 IMP</h4><p>smalltalk是动态语言的鼻祖，更是OC发展的最大推动力。在smalltalk中，所有的东西都是对象（或者都应该被当做对象），例如表达式2 + 3被理解成向对象2发送了消息+，其中接收的参数是 3</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">id</span> (*IMP)(<span class=\"keyword\">id</span>, SEL, ...);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>它就是一个函数指针，是有编译器生成的。指向了方法的实现。<br><code>IMP</code>跟<code>block</code>是非常相似的东西，<code>IMP</code>可以看做是一个特殊的<code>block</code>，同样的系统提供了两者相互转换的方法：<code>imp_implementationWithBlock</code>和<code>imp_getBlock</code>。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">void</span>)initialize</div><div class=\"line\">    <span class=\"keyword\">void</span> (^requestBlock)(<span class=\"keyword\">id</span> object, SEL aSelector, <span class=\"keyword\">id</span> URL, <span class=\"keyword\">id</span> parameters) = </div><div class=\"line\">        ^(<span class=\"keyword\">id</span> object, SEL aSelector, <span class=\"keyword\">id</span> URL, <span class=\"keyword\">id</span> parameters) &#123;</div><div class=\"line\">        <span class=\"comment\">// do some networking request</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    IMP requestIMP = imp_implementationWithBlock(requestBlock);</div><div class=\"line\">    class_addMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(networkReuqest:parameters:), requestIMP, <span class=\"string\">\"v@:@@\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// View controller</span></div><div class=\"line\">[<span class=\"keyword\">self</span> performSelector: <span class=\"keyword\">@selector</span>(networkReuqest:parameters:) withObject: URL withObject: parameters];</div></pre></td></tr></table></figure>\n<p>上面这段代码会crash的非常无厘头，提示EXC_BAD_ACCESS错误。因为block参数不能存在SEL!!去掉<code>SEL aSelector</code>这个参数就OK了。</p>\n<h4 id=\"2-4-Method\"><a href=\"#2-4-Method\" class=\"headerlink\" title=\"2.4 Method\"></a>2.4 Method</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_method *Method;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在<code>objc_method</code>中存储了方法名，方法类型和方法实现。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">method_name: 方法的名字，通常我们使用@selector()的方式获取一个方法的SEL地址，这个被用来进行散列计算存储方法的IMP实现。由于SEL类型采用了散列的算法，因此如果同一个类中存在同样名字的方法，那么就会导致方法的IMP地址无法唯一化。这也是苹果不允许同名不同参数类型的方法存在的原因。</div><div class=\"line\">method_type: 每一种数据类型有着自己对应的字符编码，method_type表示方法返回值、参数的字符编码，比如-(void)playWith:(id)的字符编码为v@:@。</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</div><div class=\"line\">    SEL method_name                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">char</span> *method_types                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    IMP method_imp                                           OBJC2_UNAVAILABLE;</div><div class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n<h4 id=\"2-5-Ivar\"><a href=\"#2-5-Ivar\" class=\"headerlink\" title=\"2.5 Ivar\"></a>2.5 Ivar</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_ivar *Ivar;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Ivar</code>代表类中的实例变量。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_name                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_type                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n<h4 id=\"2-6-Property\"><a href=\"#2-6-Property\" class=\"headerlink\" title=\"2.6 Property\"></a>2.6 Property</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *Property;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *objc_property_t;<span class=\"comment\">//这个更常用</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>@property</code>标记了类中的属性，是指向<code>objc_property</code>结构体的指针。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_property &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *attributes;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-7-Cache\"><a href=\"#2-7-Cache\" class=\"headerlink\" title=\"2.7 Cache\"></a>2.7 Cache</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_cache *Cache</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Cache为方法调用的性能进行优化。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_cache &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask <span class=\"comment\">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> occupied                                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    Method buckets[<span class=\"number\">1</span>]                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"3-Runtime中方法使用\"><a href=\"#3-Runtime中方法使用\" class=\"headerlink\" title=\"3.Runtime中方法使用\"></a>3.Runtime中方法使用</h2><h4 id=\"3-1-交换两个方法实现\"><a href=\"#3-1-交换两个方法实现\" class=\"headerlink\" title=\"3.1 交换两个方法实现\"></a>3.1 交换两个方法实现</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取某个类的类方法</span></div><div class=\"line\">Method class_getClassMethod(Class cls , SEL name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取某个类的实例方法</span></div><div class=\"line\">Method class_getInstanceMethod(Class cls , SEL name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//交换两个方法的实现</span></div><div class=\"line\"><span class=\"keyword\">void</span> method_exchangeImplementations(Method m1 , Method m2)</div></pre></td></tr></table></figure>\n<p><strong>实例</strong></p>\n<p><strong>交换类方法</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method m1 = class_getClassMethod([SomeClass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(method1))</div><div class=\"line\">Method m2 = class_getClassMethod([SomeClass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(method2))</div><div class=\"line\"></div><div class=\"line\">method_exchangeImplementations(m1, m2)</div></pre></td></tr></table></figure>\n<p><strong>拦截系统方法</strong></p>\n<p>1、为UIImage创建分类，自定义xd_imageNamed:用于拦截系统方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">UIImage</span> *)xd_imageNamed:(<span class=\"built_in\">NSString</span> *)name &#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> version = [[<span class=\"built_in\">UIDevice</span> currentDevice].systemVersion doubleValue];</div><div class=\"line\">    <span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">7.0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果系统版本是7.0以上，使用另外一套文件名结尾是‘_os7’的扁平化图片</span></div><div class=\"line\">        name = [name stringByAppendingString:<span class=\"string\">@\"_os7\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//这里因为系统方法名已经变成我们自定义的方法，所以这里要将实际要调用的</span></div><div class=\"line\">    <span class=\"comment\">//imageNamed:换成我们自定义的方法才能调到系统的imageNamed:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">UIImage</span> xd_imageNamed:name];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、在分类中重写UIImage的load方法，实现方法交换。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取两个类的类方法</span></div><div class=\"line\">    Method m1 = class_getClassMethod([<span class=\"built_in\">UIImage</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(imageNamed:));</div><div class=\"line\">    Method m2 = class_getClassMethod([<span class=\"built_in\">UIImage</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(xd_imageNamed:));</div><div class=\"line\">    <span class=\"comment\">// 开始交换方法实现</span></div><div class=\"line\">    method_exchangeImplementations(m1, m2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-2-给分类添加属性\"><a href=\"#3-2-给分类添加属性\" class=\"headerlink\" title=\"3.2 给分类添加属性\"></a>3.2 给分类添加属性</h4><blockquote>\n<p>在分类中是无法设置属性的，因为在分类声明中写<code>@property</code>只能生成get和set方法的声明，但是<br>无法生成成员变量。如果使用成员变量，比如:</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> _num</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)num &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setnum:(<span class=\"keyword\">int</span>)num &#123;</div><div class=\"line\">    _num = num;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//但是全局变量程序整个执行过程中内存里只有一份，当我创建多个对象</span></div><div class=\"line\"><span class=\"comment\">//修改的都是同一个值。</span></div></pre></td></tr></table></figure>\n<p><strong>属性关联</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">将值value和对象object关联起来(将值存储到对象中)</div><div class=\"line\">object : 给哪个对象设置属性</div><div class=\"line\">key    : 用于取出存储值的key，一个属性对应一个key，key可以是char，double，int等。</div><div class=\"line\">value  : 给属性设置的值</div><div class=\"line\">policy : 储存策略(assign，copy，retain)</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">void</span> objc_setAssociatedObject(<span class=\"keyword\">id</span> object , <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key , <span class=\"keyword\">id</span> value , objc_AssociationPloicy policy)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">用key取值</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">id</span> objc_getAssociatedObject(<span class=\"keyword\">id</span> object , <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key)</div></pre></td></tr></table></figure>\n<p><strong>举个栗子:</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//.h文件</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> *content;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//.m文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> contentKey;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setContent:(<span class=\"built_in\">NSString</span> *)content &#123;</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;contentKey, content, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)content &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, &amp;contentKey);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-3-获取类的所以成员变量\"><a href=\"#3-3-获取类的所以成员变量\" class=\"headerlink\" title=\"3.3 获取类的所以成员变量\"></a>3.3 获取类的所以成员变量</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">获取类的所有成员变量</div><div class=\"line\">*/</div><div class=\"line\">Ivar *class_copyIvarList(Class cls, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">获取成员变量的名字</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getName(Ivar v)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">获取成员变量的类型</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getTypeEndcoding(Ivar v)</div></pre></td></tr></table></figure>\n<p><strong>举个栗子:重写归档和解档方法</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//.h</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Extension</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)ignoredNames;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)encode:(<span class=\"built_in\">NSCoder</span> *)aCoder;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)decode:(<span class=\"built_in\">NSCoder</span> *)aDecoder;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//.m</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"NSObject+Extension.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Extension</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)decode:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</div><div class=\"line\">    <span class=\"comment\">// 一层层父类往上查找，对父类的属性执行归解档方法</span></div><div class=\"line\">    Class c = <span class=\"keyword\">self</span>.class;</div><div class=\"line\">    <span class=\"keyword\">while</span> (c &amp;&amp;c != [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> outCount = <span class=\"number\">0</span>;</div><div class=\"line\">        Ivar *ivars = class_copyIvarList(c, &amp;outCount);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i++) &#123;</div><div class=\"line\">            Ivar ivar = ivars[i];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果有实现该方法再去调用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(ignoredNames)]) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([[<span class=\"keyword\">self</span> ignoredNames] containsObject:key]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">id</span> value = [aDecoder decodeObjectForKey:key];</div><div class=\"line\">            [<span class=\"keyword\">self</span> setValue:value forKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        free(ivars);</div><div class=\"line\">        c = [c superclass];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encode:(<span class=\"built_in\">NSCoder</span> *)aCoder &#123;</div><div class=\"line\">    <span class=\"comment\">// 一层层父类往上查找，对父类的属性执行归解档方法</span></div><div class=\"line\">    Class c = <span class=\"keyword\">self</span>.class;</div><div class=\"line\">    <span class=\"keyword\">while</span> (c &amp;&amp;c != [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> outCount = <span class=\"number\">0</span>;</div><div class=\"line\">        Ivar *ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i++) &#123;</div><div class=\"line\">            Ivar ivar = ivars[i];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果有实现该方法再去调用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(ignoredNames)]) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([[<span class=\"keyword\">self</span> ignoredNames] containsObject:key]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">id</span> value = [<span class=\"keyword\">self</span> valueForKeyPath:key];</div><div class=\"line\">            [aCoder encodeObject:value forKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        free(ivars);</div><div class=\"line\">        c = [c superclass];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>使用方法</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置需要忽略的属性</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)ignoredNames &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> @[<span class=\"string\">@\"bone\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在系统方法内来调用我们的方法</span></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> decode:aDecoder];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> encode:aCoder];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-4-替换方法实现\"><a href=\"#3-4-替换方法实现\" class=\"headerlink\" title=\"3.4 替换方法实现\"></a>3.4 替换方法实现</h4><p>假设现在需要一个圆角按钮，并且保证点击触发事件的范围必须要这个圆之内，那么通过一个UIButton+Runtime的扩展来替换旧有-pointInside:withEvent:方法</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIButton</span>(<span class=\"title\">Runtime</span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">BOOL</span> roundTouchEnable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * RoundTouchEnableKey = &amp;RoundTouchEnableKey;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIButton</span>(<span class=\"title\">Runtime</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)roundTouchEnable</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [objc_getAssociatedObject(<span class=\"keyword\">self</span>, RoundTouchEnableKey) boolValue];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setRoundTouchEnable: (<span class=\"built_in\">BOOL</span>)roundTouchEnable</div><div class=\"line\">&#123;</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, RoundTouchEnableKey, @(roundTouchEnable), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)replacePointInside: (<span class=\"built_in\">CGPoint</span>)point withEvent: (<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectGetWidth</span>(<span class=\"keyword\">self</span>.frame) != <span class=\"built_in\">CGRectGetHeight</span>(<span class=\"keyword\">self</span>.frame) </div><div class=\"line\">        || !<span class=\"keyword\">self</span>.roundTouchEnable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> pointInside: point withEvent: event];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = <span class=\"built_in\">CGRectGetWidth</span>(<span class=\"keyword\">self</span>.frame) / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> offset = <span class=\"built_in\">CGPointMake</span>(point.x - radius, point.y - radius);</div><div class=\"line\">    <span class=\"keyword\">return</span> sqrt(offset.x * offset.x + offset.y * offset.y) &lt;= radius;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 替换方法实现</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)initialize</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> initialize];</div><div class=\"line\">    Method replaceMethod = class_getInstanceMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(replacePointInside:withEvent:));</div><div class=\"line\">    Method originMethod = class_getInstanceMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(pointInside:withEvent:));</div><div class=\"line\">    method_setImplementation(originMethod, method_getImplementation(replaceMethod));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"4-Runtime消息机制\"><a href=\"#4-Runtime消息机制\" class=\"headerlink\" title=\"4 Runtime消息机制\"></a>4 Runtime消息机制</h2><h4 id=\"4-1-C是一门动态语言\"><a href=\"#4-1-C是一门动态语言\" class=\"headerlink\" title=\"4.1 C是一门动态语言\"></a>4.1 C是一门动态语言</h4><ul>\n<li>静态语言：在运行前会进行类型判断，类的所有成员、方法都会在编译阶段确定好内存地址。类成员只能访问属于自己的方法和变量，如果方法调用错误，代码无法通过编译，会直接引起编译器报错。因此，静态语言结构规范、便于调试、且可以进行多样的性能优化。常见的静态语言包括java/C++/C等。</li>\n<li>动态语言：大部分的判断工作被推迟到运行时进行，类的成员变量、方法地址都在运行时确认。可以在运行时动态的添加类成员、方法等。具有较高的灵活性和可定制性、便于阅读，但方法通常无法进行内联等优化。</li>\n</ul>\n<blockquote>\n<p><code>smalltalk</code>是动态语言的鼻祖，更是OC发展的最大推动力。在<code>smalltalk</code>中，所有的东西都是对象（或者都应该被当做对象），例如表达式<code>5 + 3</code>被理解成向对象5发送了消息+，其中接收的参数是 3。</p>\n</blockquote>\n<h4 id=\"4-2-消息发送过程\"><a href=\"#4-2-消息发送过程\" class=\"headerlink\" title=\"4.2 消息发送过程\"></a>4.2 消息发送过程</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//无参数</span></div><div class=\"line\">objc_msgSend(receiver, selector)</div><div class=\"line\"><span class=\"comment\">//有参数时</span></div><div class=\"line\">objc_msgSend(receiver, selector, arg1, arg2, ...)</div></pre></td></tr></table></figure>\n<h5 id=\"4-2-1-消息发送总览\"><a href=\"#4-2-1-消息发送总览\" class=\"headerlink\" title=\"4.2.1 消息发送总览\"></a>4.2.1 消息发送总览</h5><ol>\n<li>检测这个<code>selector</code> 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会<code>retain</code>,<code>release</code>这些函数了。</li>\n<li>检测这个<code>target</code>是不是<code>nil</code>对象。ObjC的特性是允许对一个<code>nil</code>对象执行任何一个方法不会Crash，因为会被忽略掉。</li>\n<li>如果上面两个通过，就从先<code>cache</code>里面找这个类的<code>IMP</code>，找到就直接跳到对应函数里面。</li>\n<li>如果<code>cache</code>里面没有，就到类的方法列表中查找，然后超类的方法列表，一直到<code>NSObject</code>。</li>\n<li>如果还说没有就要进入<code>动态方法</code>解析了。</li>\n</ol>\n<blockquote>\n<p>为了高度优化性能，苹果直接使用汇编实现了这个函数（源码处于Source/objc-msg-arm.s文件下）：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*****************************************************************</span></div><div class=\"line\"> *</div><div class=\"line\"> * id objc_msgSend(id self, SEL    _cmd,...);</div><div class=\"line\"> *</div><div class=\"line\"> *****************************************************************/</div><div class=\"line\">    ENTRY objc_msgSend</div><div class=\"line\">    MESSENGER_START</div><div class=\"line\"></div><div class=\"line\">    cbz    r0, LNilReceiver_f    <span class=\"comment\">// 判断消息接收者是否为nil</span></div><div class=\"line\"></div><div class=\"line\">    ldr    r9, [r0]              <span class=\"comment\">// r9 = self-&gt;isa</span></div><div class=\"line\">    CacheLookup NORMAL           <span class=\"comment\">// 到缓存中查找方法</span></div><div class=\"line\"></div><div class=\"line\">LCacheMiss:                      <span class=\"comment\">// 方法未缓存</span></div><div class=\"line\">    MESSENGER_END_SLOW</div><div class=\"line\">    ldr    r9, [r0, <span class=\"meta\">#ISA]        </span></div><div class=\"line\">    b    __objc_msgSend_uncached</div><div class=\"line\"></div><div class=\"line\">LNilReceiver:                    <span class=\"comment\">// 消息接收者为nil处理</span></div><div class=\"line\">    mov    r1, <span class=\"meta\">#0</span></div><div class=\"line\">    mov    r2, <span class=\"meta\">#0</span></div><div class=\"line\">    mov    r3, <span class=\"meta\">#0</span></div><div class=\"line\">    FP_RETURN_ZERO</div><div class=\"line\">    MESSENGER_END_NIL</div><div class=\"line\">    bx    lr    </div><div class=\"line\"></div><div class=\"line\">LMsgSendExit:</div><div class=\"line\">    END_ENTRY objc_msgSend</div></pre></td></tr></table></figure>\n<h5 id=\"4-2-2-查找方法\"><a href=\"#4-2-2-查找方法\" class=\"headerlink\" title=\"4.2.2 查找方法\"></a>4.2.2 查找方法</h5><blockquote>\n<p>查找方法实现是通过_class_lookupMethodAndLoadCache3这个函数完成的：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\">IMP _class_lookupMethodAndLoadCache3(<span class=\"keyword\">id</span> obj, SEL sel, Class cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> lookUpImpOrForward(cls, sel, obj, </div><div class=\"line\">                          <span class=\"literal\">YES</span><span class=\"comment\">/*initialize*/</span>, <span class=\"literal\">NO</span><span class=\"comment\">/*cache*/</span>, <span class=\"literal\">YES</span><span class=\"comment\">/*resolver*/</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IMP lookUpImpOrForward(Class cls, SEL sel, <span class=\"keyword\">id</span> inst, </div><div class=\"line\">                   <span class=\"keyword\">bool</span> initialize, <span class=\"keyword\">bool</span> cache, <span class=\"keyword\">bool</span> resolver)</div><div class=\"line\">&#123;</div><div class=\"line\">    Class curClass;</div><div class=\"line\">    IMP methodPC = <span class=\"literal\">nil</span>;</div><div class=\"line\">    Method meth;</div><div class=\"line\">    <span class=\"keyword\">bool</span> triedResolver = <span class=\"literal\">NO</span>;</div><div class=\"line\"></div><div class=\"line\">    methodListLock.assertUnlocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果传入的cache为YES，到类缓存中查找方法缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache) &#123;</div><div class=\"line\">        methodPC = _cache_getImp(cls, sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (methodPC) <span class=\"keyword\">return</span> methodPC;    </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 判断类是否已经被释放</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cls == _class_getFreedObjectClass())</div><div class=\"line\">        <span class=\"keyword\">return</span> (IMP) _freedHandler;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果类未初始化，对其进行初始化。如果这个消息是initialize，那么直接进行类的初始化</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (initialize  &amp;&amp;  !cls-&gt;isInitialized()) &#123;</div><div class=\"line\">        _class_initialize (_class_getNonMetaClass(cls, inst));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> retry:</div><div class=\"line\">    methodListLock.lock();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 忽略在GC环境下的部分消息，比如retain、release等</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (ignoreSelector(sel)) &#123;</div><div class=\"line\">        methodPC = _cache_addIgnoredEntry(cls, sel);</div><div class=\"line\">        <span class=\"keyword\">goto</span> done;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 遍历缓存方法，如果找到，直接返回</span></div><div class=\"line\">    methodPC = _cache_getImp(cls, sel);</div><div class=\"line\">    <span class=\"keyword\">if</span> (methodPC) <span class=\"keyword\">goto</span> done;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 遍历类自身的方法列表查找方法实现</span></div><div class=\"line\">    meth = _class_getMethodNoSuper_nolock(cls, sel);</div><div class=\"line\">    <span class=\"keyword\">if</span> (meth) &#123;</div><div class=\"line\">        log_and_fill_cache(cls, cls, meth, sel);</div><div class=\"line\">        methodPC = method_getImplementation(meth);</div><div class=\"line\">        <span class=\"keyword\">goto</span> done;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 尝试向上遍历父类的方法列表查找实现</span></div><div class=\"line\">    curClass = cls;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((curClass = curClass-&gt;superclass)) &#123;</div><div class=\"line\">        <span class=\"comment\">// Superclass cache.</span></div><div class=\"line\">        meth = _cache_getMethod(curClass, sel, _objc_msgForward_impcache);</div><div class=\"line\">        <span class=\"keyword\">if</span> (meth) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (meth != (Method)<span class=\"number\">1</span>) &#123; </div><div class=\"line\">                log_and_fill_cache(cls, curClass, meth, sel);</div><div class=\"line\">                methodPC = method_getImplementation(meth);</div><div class=\"line\">                <span class=\"keyword\">goto</span> done;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Found a forward:: entry in a superclass.</span></div><div class=\"line\">                <span class=\"comment\">// Stop searching, but don't cache yet; call method </span></div><div class=\"line\">                <span class=\"comment\">// resolver for this class first.</span></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 查找父类的方法列表</span></div><div class=\"line\">        meth = _class_getMethodNoSuper_nolock(curClass, sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (meth) &#123;</div><div class=\"line\">            log_and_fill_cache(cls, curClass, meth, sel);</div><div class=\"line\">            methodPC = method_getImplementation(meth);</div><div class=\"line\">            <span class=\"keyword\">goto</span> done;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 没有找到任何的方法实现，进入消息转发第一阶段“动态方法解析”</span></div><div class=\"line\">    <span class=\"comment\">// 调用+ (BOOL)resolveInstanceMethod: (SEL)selector</span></div><div class=\"line\">    <span class=\"comment\">// 征询接收者所属的类是否能够动态的添加这个未实现的方法来解决问题</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resolver  &amp;&amp;  !triedResolver) &#123;</div><div class=\"line\">        methodListLock.unlock();</div><div class=\"line\">        _class_resolveMethod(cls, sel, inst);</div><div class=\"line\">        triedResolver = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"keyword\">goto</span> retry;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仍然没有找到方法实现进入消息转发第二阶段“备援接收者”</span></div><div class=\"line\">    <span class=\"comment\">// 先后会调用 -(id)forwardingTargetForSelector: (SEL)selector </span></div><div class=\"line\">    <span class=\"comment\">// 以及 - (void)forwardInvocation: (NSInvocation*)invocation 进行最后的补救</span></div><div class=\"line\">    <span class=\"comment\">// 如果补救未成功抛出消息发送错误异常</span></div><div class=\"line\">    _cache_addForwardEntry(cls, sel);</div><div class=\"line\">    methodPC = _objc_msgForward_impcache;</div><div class=\"line\"></div><div class=\"line\"> done:</div><div class=\"line\">    methodListLock.unlock();</div><div class=\"line\"></div><div class=\"line\">    assert(!(ignoreSelector(sel)  &amp;&amp;  methodPC != (IMP)&amp;_objc_ignored_method));</div><div class=\"line\">    <span class=\"keyword\">return</span> methodPC;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>以上为方法调用全部过程，主要分为三部分：</strong></p>\n<p>1、查找是否存在对应方法缓存，如果存在直接返回调用，为了优化性能，方法的缓存使用了散列表的方式。</p>\n<p>2、未找到缓存， 到类本身或顺着类结构向上查找方法实现，返回<code>method_t *</code>类型也就是<code>Method</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//非加锁状态下查找方法实现</span></div><div class=\"line\"><span class=\"keyword\">static</span> method_t * getMethodNoSuper_nolock(Class cls, SEL sel)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    assert(cls-&gt;isRealized());</div><div class=\"line\">    <span class=\"comment\">// fixme nil cls? </span></div><div class=\"line\">    <span class=\"comment\">// fixme nil sel?</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (auto mlists = cls-&gt;data()-&gt;methods.beginLists(), </div><div class=\"line\">            end = cls-&gt;data()-&gt;methods.endLists(); </div><div class=\"line\">             mlists != end;</div><div class=\"line\">               ++mlists)</div><div class=\"line\">    &#123;</div><div class=\"line\">        method_t *m = search_method_list(*mlists, sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (m) <span class=\"keyword\">return</span> m;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 搜索方法列表</span></div><div class=\"line\"><span class=\"keyword\">static</span> method_t * search_method_list(<span class=\"keyword\">const</span> method_list_t *mlist, SEL sel)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> methodListIsFixedUp = mlist-&gt;isFixedUp();</div><div class=\"line\">    <span class=\"keyword\">int</span> methodListHasExpectedSize = mlist-&gt;entsize() == <span class=\"keyword\">sizeof</span>(method_t);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (__builtin_expect(methodListIsFixedUp &amp;&amp; methodListHasExpectedSize, <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">          <span class=\"comment\">// 对有序数组进行线性探测</span></div><div class=\"line\">          <span class=\"keyword\">return</span> findMethodInSortedMethodList(sel, mlist);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Linear search of unsorted method list</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (auto&amp; meth : *mlist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (meth.name == sel) <span class=\"keyword\">return</span> &amp;meth;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if DEBUG</span></div><div class=\"line\">    <span class=\"comment\">// sanity-check negative results</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mlist-&gt;isFixedUp()) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (auto&amp; meth : *mlist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (meth.name == sel) &#123;</div><div class=\"line\">                _objc_fatal(<span class=\"string\">\"linear search worked when binary search did not\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在这步骤中找到方法实现，则将它加入方法缓存中。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 记录并且缓存方法</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> log_and_fill_cache(Class cls, IMP imp, SEL sel, <span class=\"keyword\">id</span> receiver, Class implementer)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#if SUPPORT_MESSAGE_LOGGING</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (objcMsgLogEnabled) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> cacheIt = logMessageSend(implementer-&gt;isMetaClass(), </div><div class=\"line\">                                cls-&gt;nameForLogging(),</div><div class=\"line\">                                implementer-&gt;nameForLogging(), </div><div class=\"line\">                                sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!cacheIt) <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">    cache_fill (cls, sel, imp, receiver);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在无加锁状态下缓存方法</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> cache_fill_nolock(Class cls, SEL sel, IMP imp, <span class=\"keyword\">id</span> receiver)</div><div class=\"line\">&#123;</div><div class=\"line\">    cacheUpdateLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!cls-&gt;isInitialized()) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache_getImp(cls, sel)) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    cache_t *cache = getCache(cls);</div><div class=\"line\">    cache_key_t key = getKey(sel);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果缓存占用不到3/4，进行缓存。</span></div><div class=\"line\">    mask_t newOccupied = cache-&gt;occupied() + <span class=\"number\">1</span>;</div><div class=\"line\">    mask_t capacity = cache-&gt;capacity();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache-&gt;isConstantEmptyCache()) &#123;</div><div class=\"line\">        cache-&gt;reallocate(capacity, capacity ?: INIT_CACHE_SIZE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newOccupied &lt;= capacity / <span class=\"number\">4</span> * <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 扩充缓存。为了性能，扩充后原有缓存方法全部移除</span></div><div class=\"line\">        cache-&gt;expand();</div><div class=\"line\">    &#125;</div><div class=\"line\">    bucket_t *bucket = cache-&gt;find(key, receiver);</div><div class=\"line\">    <span class=\"keyword\">if</span> (bucket-&gt;key() == <span class=\"number\">0</span>) cache-&gt;incrementOccupied();</div><div class=\"line\">    bucket-&gt;set(key, imp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在类自身方法中没找到，那么循环父类方法，重复上面动作。</p>\n<p>3、如果未找到任何方法实现，则会出发消息转发机制。</p>\n<blockquote>\n<p>消息转发分为两个阶段，第一个阶段我们可以通过动态添加方法之后让编译器再次执行查找方法实现的过程；第二个阶段称作备援的接收者，就是找到一个接盘侠来处理这个事件。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> _class_resolveMethod(Class cls, SEL sel, <span class=\"keyword\">id</span> inst)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 非beta类的情况下直接调用 resolveInstanceMethod 方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (! cls-&gt;isMetaClass()) &#123;</div><div class=\"line\">        _class_resolveInstanceMethod(cls, sel, inst);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 先调用 resolveClassMethod 请求动态添加方法</span></div><div class=\"line\">        <span class=\"comment\">// 然后进行一次查找判断是否处理完成</span></div><div class=\"line\">        <span class=\"comment\">// 如果没有添加，再调用 resolveInstanceMethod 方法</span></div><div class=\"line\">        _class_resolveClassMethod(cls, sel, inst);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!lookUpImpOrNil(cls, sel, inst, </div><div class=\"line\">                      <span class=\"literal\">NO</span><span class=\"comment\">/*initialize*/</span>, <span class=\"literal\">YES</span><span class=\"comment\">/*cache*/</span>, <span class=\"literal\">NO</span><span class=\"comment\">/*resolver*/</span>)) </div><div class=\"line\">        &#123;</div><div class=\"line\">            _class_resolveInstanceMethod(cls, sel, inst);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"4-2-3-方法缓存\"><a href=\"#4-2-3-方法缓存\" class=\"headerlink\" title=\"4.2.3 方法缓存\"></a>4.2.3 方法缓存</h5><blockquote>\n<p><code>cache</code>存储着我们在方法调用中需要查找的方法缓存。作为缓存方法的cache采用了散列表，以此来大幅度提高检索的速度：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> cache_t &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> bucket_t *_buckets;</div><div class=\"line\">    mask_t _mask;</div><div class=\"line\">    mask_t _occupied;</div><div class=\"line\">    <span class=\"comment\">// functions</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cache method</span></div><div class=\"line\">buckets = (cache_entry **)cache-&gt;buckets;</div><div class=\"line\"><span class=\"keyword\">for</span> (index = <span class=\"built_in\">CACHE_HASH</span>(sel, cache-&gt;mask); </div><div class=\"line\">     buckets[index] != <span class=\"literal\">NULL</span>; </div><div class=\"line\">     index = (index+<span class=\"number\">1</span>) &amp; cache-&gt;mask)</div><div class=\"line\">&#123; &#125;</div><div class=\"line\">buckets[index] = entry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//利用sel的指针地址和mask做一个简单的位运算，然后找到一个空槽存储起来。</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>以此推出从缓存中查找sel实现代码CacheLookup, 苹果使用汇编完成查找步骤，用以优化性能。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">.macro CacheLookup</div><div class=\"line\"></div><div class=\"line\">    ldrh    r12, [r9, <span class=\"meta\">#CACHE_MASK]    // r12 = mask</span></div><div class=\"line\">    ldr    r9, [r9, <span class=\"meta\">#CACHE]    // r9 = buckets</span></div><div class=\"line\">.if $<span class=\"number\">0</span> == STRET  ||  $<span class=\"number\">0</span> == SUPER_STRET</div><div class=\"line\">    and    r12, r12, r2        <span class=\"comment\">// r12 = index = SEL &amp; mask</span></div><div class=\"line\">.else</div><div class=\"line\">    and    r12, r12, r1        <span class=\"comment\">// r12 = index = SEL &amp; mask</span></div><div class=\"line\">.endif</div><div class=\"line\">    add    r9, r9, r12, LSL <span class=\"meta\">#3    // r9 = bucket = buckets+index*8</span></div><div class=\"line\">    ldr    r12, [r9]        <span class=\"comment\">// r12 = bucket-&gt;sel</span></div><div class=\"line\"><span class=\"number\">2</span>:</div><div class=\"line\">.if $<span class=\"number\">0</span> == STRET  ||  $<span class=\"number\">0</span> == SUPER_STRET</div><div class=\"line\">    teq    r12, r2</div><div class=\"line\">.else</div><div class=\"line\">    teq    r12, r1</div><div class=\"line\">.endif</div><div class=\"line\">    bne    <span class=\"number\">1</span>f</div><div class=\"line\">    CacheHit $<span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span>:    </div><div class=\"line\">    cmp    r12, <span class=\"meta\">#1</span></div><div class=\"line\">    blo    LCacheMiss_f        <span class=\"comment\">// if (bucket-&gt;sel == 0) cache miss</span></div><div class=\"line\">    it    eq            <span class=\"comment\">// if (bucket-&gt;sel == 1) cache wrap</span></div><div class=\"line\">    ldreq    r9, [r9, <span class=\"meta\">#4]        // bucket-&gt;imp is before first bucket</span></div><div class=\"line\">    ldr    r12, [r9, <span class=\"meta\">#8]!        // r12 = (++bucket)-&gt;sel</span></div><div class=\"line\">    b    <span class=\"number\">2</span>b</div><div class=\"line\"></div><div class=\"line\">.endmacro</div></pre></td></tr></table></figure>\n<h4 id=\"4-3-消息转发\"><a href=\"#4-3-消息转发\" class=\"headerlink\" title=\"4.3 消息转发\"></a>4.3 消息转发</h4><blockquote>\n<p>通常情况下，调用不属于某个对象的方法的时候，应用就会崩溃crash。<br>通过方法调用源码可以看到，并不是没有找到方法实现就直接crash。<br>在crash之前编译器会进行消息转发机制，有依次有三次机会。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一阶段         resolveInstanceMethod  </div><div class=\"line\">(动态添加方法：添加对应方法，跳到方法实现)             </div><div class=\"line\">\t\t\t\t\t\t   </div><div class=\"line\">第二阶段\t\t forwardingTargetForSelector</div><div class=\"line\">(最后的接盘侠：直接接管对应方法，实现方法)</div><div class=\"line\"></div><div class=\"line\">\t\t\t     forwardInvocation</div></pre></td></tr></table></figure>\n<p>1、第一阶段(resolveInstanceMethod)</p>\n<p>避免程序因为类型错误导致crash，可以通过<code>class_addMethod</code>动态添加处理方法。<br>类可以在<code>objc_registerClassPair</code>完成类注册后动态添加方法，但不能动态添加属性，<br>类似于<code>category</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> wrongTypeGetter(<span class=\"keyword\">id</span> object, SEL sel) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> wrongTypeSetter(<span class=\"keyword\">id</span> object, SEL sel, <span class=\"keyword\">id</span> value) &#123;</div><div class=\"line\">    <span class=\"comment\">// do nothing</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod: (SEL)selector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> * selName = <span class=\"built_in\">NSStringFromSelector</span>(selector);</div><div class=\"line\">    <span class=\"keyword\">if</span> ([sel hasPrefix: <span class=\"string\">@\"set\"</span>]) &#123;</div><div class=\"line\">        class_addMethod(<span class=\"keyword\">self</span>, selector, (IMP)wrongTypeSetter, <span class=\"string\">\"v@:@\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        class_addMethod(<span class=\"keyword\">self</span>, selector, (IMP)wrongTypeGetter, <span class=\"string\">\"@@:\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、第二阶段(forwardingTargetForSelector)</p>\n<blockquote>\n<p>在iOS中不支持多继承，尽管我们可以通过协议和组合模式实现<code>伪多继承</code>。<code>伪多继承</code>和<code>多继承</code>的区别在于：<code>多继承</code>是将多个类的功能组合到一个对象当中，而<code>伪多继承</code>多个类的功能依旧分布在不同对象当中，但是对象彼此对消息发送者透明。那么，如果我们消息转发给另一个对象可以用来实现这种伪多继承。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>: <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSNumber</span> * age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector: (SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 甚至可以通过runtime遍历自己属性找到可以响应方法的接盘侠</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> * selName = <span class=\"built_in\">NSStringFromSelector</span>(aSelector);</div><div class=\"line\">    <span class=\"keyword\">if</span> ([selName hasSuffix: <span class=\"string\">@\"Value\"</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.age;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// View controller</span></div><div class=\"line\"><span class=\"keyword\">id</span> p = [[Person alloc] init];</div><div class=\"line\">[p setAge: @(<span class=\"number\">18</span>)];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lu, %.2f\"</span>, [p integerValue], [p doubleValue]);    <span class=\"comment\">//18, 18.00</span></div></pre></td></tr></table></figure>\n<p>3、第二阶段最后(forwardInvocation)</p>\n<blockquote>\n<p><code>runtime</code>需要生成一个<code>methodSignature</code>变量来组装，这将通过调用消息接收者的<code>-(NSMethodSignature *)methodSignatureForSelector:</code>获取，这个变量包含了方法的参数类型、参数个数以及消息接收者等信息。接着把这个变量组装成一个NSInvocation对象进行最后一次的消息转发，调用接收者的<code>-forwardInvocation:</code>方法。我们可以对<code>invocation</code>做任何事情，包括随意修改参数值、消息接收者等。我最常拿来干的事情就是减少数组的遍历工作：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSArray</span>(<span class=\"title\">Runtime</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation: (<span class=\"built_in\">NSInvocation</span> *)anInvocation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> item <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([item respondsToSelector: anInvocation.selector]) &#123;</div><div class=\"line\">            [anInvocation invokeWithTarget: item];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>NSInvocation对象封装了动态库向接收器转发执行消息所需的所有必要信息，如目标对象、方法选择器、方法参数。因此可以借助NSInvocation实例，使用内部的选择器和其他信息，在任何时候调用接收器。同一个NSInvocation实例可重复调用接收器的同一个方法，或通过不同的目标和方法签名进行复用。<br>OC中直接调用对象的消息方法有两种：<br>1.<code>performSelector:withObject</code><br>2.NSInvocation<br>实现NSArray的map方法。可以让数组中每个元素接受消息，并且返回一个新的数组。该方法类似于<code>makeObjectsPerformSelector:</code>，不同的是map可以传送带有多个参数的消息，而且可以延伸至数组以外的集合。比如:</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">\tNSArray *testArray = @[@1, @2, @3];</div><div class=\"line\">\tid stringArray = [[testArray map] stringValue];</div><div class=\"line\">\tNSLog(@%@\", stringArray); // \"1\", \"2\", \"3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//NSArray+Map.h</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSArray</span> (<span class=\"title\">Map</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)map;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//NSArray+Map.m</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSArray</span> (<span class=\"title\">Map</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)map &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> [[<span class=\"built_in\">NSArrayMapProxy</span> alloc] initWithArray:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现NSArrayMapProxy</span></div><div class=\"line\"><span class=\"comment\">//NSArrayMapProxy.h</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSArrayMapProxy</span> : <span class=\"title\">NSProxy</span> </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">NSArray</span> *_array;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithArray:(<span class=\"built_in\">NSArray</span> *)array;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//NSArrayMapProxy.m</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSArrayMapProxy</span> </span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithArray:(<span class=\"built_in\">NSArray</span> *)array &#123;</div><div class=\"line\">\t_array = array;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//示例中的数组array包含三个NSNumber类型的对象，于是向proxy发送stringValue消息的时候，proxy就负责将消息转发给数组中的每个元素。于是NSArrayMapProxy就需要重载NSProxy的两个方法，来实现消息转发机制。</span></div><div class=\"line\"><span class=\"comment\">//1.在NSArrayMapProxy收到消息后，首先methodSignatureForSelector:会被调用，用于返回一个方法签名。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里重载方法时，遍历数组中的元素，如果有元素响应消息，就可以通过该元素找到消息的方法签名。</span></div><div class=\"line\"><span class=\"comment\">//这个函数也就是找到方法的实现，自己没有实现方法，就到别的对象中找。</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> _array) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ([obj respondsToSelector:sel]) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> [obj methodSignatureForSelector:sel];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> methodSignatureForSelector:sel];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.在得到方法签名之后，接着会调`forwardInvocation:`方法，于是可以重载方法后在这里决定消息的转发去向。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)invocation &#123;</div><div class=\"line\">\tSEL sel = invocation.selector;</div><div class=\"line\">\t<span class=\"built_in\">NSMutableArray</span> *mappedArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:_array.count];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> _array) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ([obj respondsToSelector:sel]) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//[NSInvocation invoke]方法调用</span></div><div class=\"line\">\t\t\t[invocation invokeWithTarget:obj]; <span class=\"comment\">//调用数组中元素obj的stringValue方法</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">id</span> mappedValue; <span class=\"comment\">//用于存储调用返回value</span></div><div class=\"line\">\t\t\t[invocation getReturnValue:&amp;mappedValue];</div><div class=\"line\">\t\t\t[mappedArray addObject:mapped];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//设置调用[NSArrayMapProxy stringValue]的返回值</span></div><div class=\"line\">\t[invocation setReturnValue:&amp;mappedArray];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>具体思路：为NSArray添加map方法，当调用map方式时，返回的是NSArrayMapProxy对象。之后调用NSArrayMapProxy对象的stringValue方法。<br>NSArrayMapProxy对象的作用就是在NSArray元素中找到sel方法的签名(就是得到stringValue的实现方法)，然后让每个元素都调用这个方法，并将返回值存储起来，得到新的NSArray。</p>\n</blockquote>\n<p>还有利用类似思路解决服务器返回NSNull问题。</p>\n","excerpt":"","more":"<h2 id=\"1-理解NSObject和元类\"><a href=\"#1-理解NSObject和元类\" class=\"headerlink\" title=\"1.理解NSObject和元类\"></a>1.理解NSObject和元类</h2><h4 id=\"1-1-在OC中的对象和类是什么\"><a href=\"#1-1-在OC中的对象和类是什么\" class=\"headerlink\" title=\"1.1 在OC中的对象和类是什么\"></a>1.1 在OC中的对象和类是什么</h4><ol>\n<li>对象是在objc.h中定义的</li>\n</ol>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// An opaque type that represents an C class.</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/// Represents an instance of a class.</span></div><div class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>类是在runtime.h中定义的</li>\n</ol>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_class &#123;</div><div class=\"line\">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if !__OBJC2__</span></div><div class=\"line\">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">&#125; OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"comment\">/* Use `Class` instead of `struct objc_class *` */</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>OC中的类和对象在源码中都是用结构体表示的。<br>本质上类并不是C语言中的类，它也是对象，也是某个类的实例，这个类称之为元类(metaclass)。<br>元类也是对象，也是某个类的实例，这个类叫根元类(root metaclass)。<br>所有元类所属类是同一个根元类。<br>根元类也是元类，所以它所属的类也是根元类，也就是它本身。<br>根元类指的就是根类(rootclass)的元类。<br>在C中有两个根类(rootclass)，一个是NSObject，一个是NSProxy。</p>\n</blockquote>\n<h4 id=\"1-2-isa指针和super-Class指针\"><a href=\"#1-2-isa指针和super-Class指针\" class=\"headerlink\" title=\"1.2 isa指针和super_Class指针\"></a>1.2 isa指针和super_Class指针</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">                            nil</div><div class=\"line\">                             ^</div><div class=\"line\">                             |</div><div class=\"line\">                             |</div><div class=\"line\">                  isa   (NSObject)      isa                      isa</div><div class=\"line\">rootclass实例   ++++++&gt; rootclass类   ++++++&gt; rootclass元类  &lt;&lt;+++++++</div><div class=\"line\">                             ^   ^             |   ^              +  +</div><div class=\"line\">                             |   |             |   |              +  +</div><div class=\"line\">                             |   ---------------   |              +  +</div><div class=\"line\">                  isa   (FatherClass)   isa                       +  +</div><div class=\"line\">fatherclass实例 ++++++&gt; fatherclass类 ++++++&gt; fatherclass元类 ++++++   +</div><div class=\"line\">                             ^                     ^                 +</div><div class=\"line\">                             |                     |                 +</div><div class=\"line\">                             |                     |                 +</div><div class=\"line\">                  isa   (SubClass)      isa                          +</div><div class=\"line\">subclass实例    ++++++&gt; subclass类    ++++++&gt; subclass元类    ++++++++</div></pre></td></tr></table></figure>\n<p><strong>我的理解</strong></p>\n<p>rootclass元类实际上是objc_class结构体对象。当创建其subclass元类时，objc内部是将父类结构体中保存的方法，<br>拷贝一份到新创建的objc_class结构提对象，此结构体对象的super_Class指针指向父类，所有子元类的isa指针都<br>指向rootclass的元类(根元类)。根元类的isa指针指向自己。比较特殊的是：<strong>根元类的super_Class指针指向根类。</strong></p>\n<p>而元类创建类的时候，类的类方法保存在元类中，实例方法保存在自己的类中。也都是用结构体记录。子类方法的<br>isa指针指向元类，super_class指针父类。根类的super_Class指针为nil。</p>\n<p>实例类型是objc_object结构体，只有isa指针，没有super_Class指针。</p>\n<h2 id=\"2-Runtime中常用名词\"><a href=\"#2-Runtime中常用名词\" class=\"headerlink\" title=\"2.Runtime中常用名词\"></a>2.Runtime中常用名词</h2><h4 id=\"2-1-SEL\"><a href=\"#2-1-SEL\" class=\"headerlink\" title=\"2.1 SEL\"></a>2.1 SEL</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector *SEL;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>源码中没能直接找到objc_selector的定义，但是从书籍是了解到可以将SEL理解为char*指针。<br>如果我们包含函数<code>-(int)test{return 1;}</code>，然后打印<code>NSLog(@&quot;SEL = %s&quot;,@selector(test));</code><br>我们将会得到输出是:<code>SEL = test</code><br>所以猜测<code>struct objc_selector</code>的定义为：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_selector &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">64</span> or ...]</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>它是objc_msgSend函数的第二个参数。在OC中用<code>selector</code>表示(Swift中是<code>Selector</code>类)<br>获取SEL方法选择器：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//使用Objc编译器命令@selector</span></div><div class=\"line\">SEL sel = <span class=\"keyword\">@selector</span>(whatMethod)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用Runtime系统的sel_registerName函数</span></div><div class=\"line\">SEL sel = sel_registerName(<span class=\"string\">\"whatMethod\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用OC方法</span></div><div class=\"line\">SEL sel = <span class=\"built_in\">NSSelectorFromString</span>(<span class=\"string\">@\"whatMethod\"</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"2-2-id\"><a href=\"#2-2-id\" class=\"headerlink\" title=\"2.2 id\"></a>2.2 id</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object *<span class=\"keyword\">id</span>;</div></pre></td></tr></table></figure>\n<h4 id=\"2-3-IMP\"><a href=\"#2-3-IMP\" class=\"headerlink\" title=\"2.3 IMP\"></a>2.3 IMP</h4><p>smalltalk是动态语言的鼻祖，更是OC发展的最大推动力。在smalltalk中，所有的东西都是对象（或者都应该被当做对象），例如表达式2 + 3被理解成向对象2发送了消息+，其中接收的参数是 3</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">id</span> (*IMP)(<span class=\"keyword\">id</span>, SEL, ...);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>它就是一个函数指针，是有编译器生成的。指向了方法的实现。<br><code>IMP</code>跟<code>block</code>是非常相似的东西，<code>IMP</code>可以看做是一个特殊的<code>block</code>，同样的系统提供了两者相互转换的方法：<code>imp_implementationWithBlock</code>和<code>imp_getBlock</code>。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">void</span>)initialize</div><div class=\"line\">    <span class=\"keyword\">void</span> (^requestBlock)(<span class=\"keyword\">id</span> object, SEL aSelector, <span class=\"keyword\">id</span> URL, <span class=\"keyword\">id</span> parameters) = </div><div class=\"line\">        ^(<span class=\"keyword\">id</span> object, SEL aSelector, <span class=\"keyword\">id</span> URL, <span class=\"keyword\">id</span> parameters) &#123;</div><div class=\"line\">        <span class=\"comment\">// do some networking request</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">    IMP requestIMP = imp_implementationWithBlock(requestBlock);</div><div class=\"line\">    class_addMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(networkReuqest:parameters:), requestIMP, <span class=\"string\">\"v@:@@\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// View controller</span></div><div class=\"line\">[<span class=\"keyword\">self</span> performSelector: <span class=\"keyword\">@selector</span>(networkReuqest:parameters:) withObject: URL withObject: parameters];</div></pre></td></tr></table></figure>\n<p>上面这段代码会crash的非常无厘头，提示EXC_BAD_ACCESS错误。因为block参数不能存在SEL!!去掉<code>SEL aSelector</code>这个参数就OK了。</p>\n<h4 id=\"2-4-Method\"><a href=\"#2-4-Method\" class=\"headerlink\" title=\"2.4 Method\"></a>2.4 Method</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_method *Method;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在<code>objc_method</code>中存储了方法名，方法类型和方法实现。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">method_name: 方法的名字，通常我们使用@selector()的方式获取一个方法的SEL地址，这个被用来进行散列计算存储方法的IMP实现。由于SEL类型采用了散列的算法，因此如果同一个类中存在同样名字的方法，那么就会导致方法的IMP地址无法唯一化。这也是苹果不允许同名不同参数类型的方法存在的原因。</div><div class=\"line\">method_type: 每一种数据类型有着自己对应的字符编码，method_type表示方法返回值、参数的字符编码，比如-(void)playWith:(id)的字符编码为v@:@。</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">struct</span> objc_method &#123;</div><div class=\"line\">    SEL method_name                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">char</span> *method_types                                       OBJC2_UNAVAILABLE;</div><div class=\"line\">    IMP method_imp                                           OBJC2_UNAVAILABLE;</div><div class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n<h4 id=\"2-5-Ivar\"><a href=\"#2-5-Ivar\" class=\"headerlink\" title=\"2.5 Ivar\"></a>2.5 Ivar</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_ivar *Ivar;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Ivar</code>代表类中的实例变量。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_ivar &#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_name                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">char</span> *ivar_type                                          OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></div><div class=\"line\">    <span class=\"keyword\">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">&#125;                                                            OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>\n<h4 id=\"2-6-Property\"><a href=\"#2-6-Property\" class=\"headerlink\" title=\"2.6 Property\"></a>2.6 Property</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *Property;</div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_property *objc_property_t;<span class=\"comment\">//这个更常用</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>@property</code>标记了类中的属性，是指向<code>objc_property</code>结构体的指针。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_property &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *attributes;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h4 id=\"2-7-Cache\"><a href=\"#2-7-Cache\" class=\"headerlink\" title=\"2.7 Cache\"></a>2.7 Cache</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_cache *Cache</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Cache为方法调用的性能进行优化。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> objc_cache &#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> mask <span class=\"comment\">/* total = mask + 1 */</span>                 OBJC2_UNAVAILABLE;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> occupied                                    OBJC2_UNAVAILABLE;</div><div class=\"line\">    Method buckets[<span class=\"number\">1</span>]                                        OBJC2_UNAVAILABLE;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"3-Runtime中方法使用\"><a href=\"#3-Runtime中方法使用\" class=\"headerlink\" title=\"3.Runtime中方法使用\"></a>3.Runtime中方法使用</h2><h4 id=\"3-1-交换两个方法实现\"><a href=\"#3-1-交换两个方法实现\" class=\"headerlink\" title=\"3.1 交换两个方法实现\"></a>3.1 交换两个方法实现</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//获取某个类的类方法</span></div><div class=\"line\">Method class_getClassMethod(Class cls , SEL name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//获取某个类的实例方法</span></div><div class=\"line\">Method class_getInstanceMethod(Class cls , SEL name)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//交换两个方法的实现</span></div><div class=\"line\"><span class=\"keyword\">void</span> method_exchangeImplementations(Method m1 , Method m2)</div></pre></td></tr></table></figure>\n<p><strong>实例</strong></p>\n<p><strong>交换类方法</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Method m1 = class_getClassMethod([SomeClass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(method1))</div><div class=\"line\">Method m2 = class_getClassMethod([SomeClass <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(method2))</div><div class=\"line\"></div><div class=\"line\">method_exchangeImplementations(m1, m2)</div></pre></td></tr></table></figure>\n<p><strong>拦截系统方法</strong></p>\n<p>1、为UIImage创建分类，自定义xd_imageNamed:用于拦截系统方法。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"built_in\">UIImage</span> *)xd_imageNamed:(<span class=\"built_in\">NSString</span> *)name &#123;</div><div class=\"line\">    <span class=\"keyword\">double</span> version = [[<span class=\"built_in\">UIDevice</span> currentDevice].systemVersion doubleValue];</div><div class=\"line\">    <span class=\"keyword\">if</span> (version &gt;= <span class=\"number\">7.0</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">// 如果系统版本是7.0以上，使用另外一套文件名结尾是‘_os7’的扁平化图片</span></div><div class=\"line\">        name = [name stringByAppendingString:<span class=\"string\">@\"_os7\"</span>];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//这里因为系统方法名已经变成我们自定义的方法，所以这里要将实际要调用的</span></div><div class=\"line\">    <span class=\"comment\">//imageNamed:换成我们自定义的方法才能调到系统的imageNamed:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"built_in\">UIImage</span> xd_imageNamed:name];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、在分类中重写UIImage的load方法，实现方法交换。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123;</div><div class=\"line\">    <span class=\"comment\">// 获取两个类的类方法</span></div><div class=\"line\">    Method m1 = class_getClassMethod([<span class=\"built_in\">UIImage</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(imageNamed:));</div><div class=\"line\">    Method m2 = class_getClassMethod([<span class=\"built_in\">UIImage</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(xd_imageNamed:));</div><div class=\"line\">    <span class=\"comment\">// 开始交换方法实现</span></div><div class=\"line\">    method_exchangeImplementations(m1, m2);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-2-给分类添加属性\"><a href=\"#3-2-给分类添加属性\" class=\"headerlink\" title=\"3.2 给分类添加属性\"></a>3.2 给分类添加属性</h4><blockquote>\n<p>在分类中是无法设置属性的，因为在分类声明中写<code>@property</code>只能生成get和set方法的声明，但是<br>无法生成成员变量。如果使用成员变量，比如:</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span> _num</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">int</span>)num &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _num;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setnum:(<span class=\"keyword\">int</span>)num &#123;</div><div class=\"line\">    _num = num;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//但是全局变量程序整个执行过程中内存里只有一份，当我创建多个对象</span></div><div class=\"line\"><span class=\"comment\">//修改的都是同一个值。</span></div></pre></td></tr></table></figure>\n<p><strong>属性关联</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">将值value和对象object关联起来(将值存储到对象中)</div><div class=\"line\">object : 给哪个对象设置属性</div><div class=\"line\">key    : 用于取出存储值的key，一个属性对应一个key，key可以是char，double，int等。</div><div class=\"line\">value  : 给属性设置的值</div><div class=\"line\">policy : 储存策略(assign，copy，retain)</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">void</span> objc_setAssociatedObject(<span class=\"keyword\">id</span> object , <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key , <span class=\"keyword\">id</span> value , objc_AssociationPloicy policy)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">用key取值</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">id</span> objc_getAssociatedObject(<span class=\"keyword\">id</span> object , <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key)</div></pre></td></tr></table></figure>\n<p><strong>举个栗子:</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//.h文件</span></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">copy</span>)<span class=\"built_in\">NSString</span> *content;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//.m文件</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> contentKey;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setContent:(<span class=\"built_in\">NSString</span> *)content &#123;</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, &amp;contentKey, content, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSString</span> *)content &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> objc_getAssociatedObject(<span class=\"keyword\">self</span>, &amp;contentKey);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-3-获取类的所以成员变量\"><a href=\"#3-3-获取类的所以成员变量\" class=\"headerlink\" title=\"3.3 获取类的所以成员变量\"></a>3.3 获取类的所以成员变量</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">获取类的所有成员变量</div><div class=\"line\">*/</span></div><div class=\"line\">Ivar *class_copyIvarList(Class cls, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *outCount)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">获取成员变量的名字</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getName(Ivar v)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">获取成员变量的类型</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *ivar_getTypeEndcoding(Ivar v)</div></pre></td></tr></table></figure>\n<p><strong>举个栗子:重写归档和解档方法</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//.h</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;Foundation/Foundation.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Extension</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)ignoredNames;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)encode:(<span class=\"built_in\">NSCoder</span> *)aCoder;</div><div class=\"line\">- (<span class=\"keyword\">void</span>)decode:(<span class=\"built_in\">NSCoder</span> *)aDecoder;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//.m</span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">\"NSObject+Extension.h\"</span></span></div><div class=\"line\"><span class=\"meta\">#import <span class=\"meta-string\">&lt;objc/runtime.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSObject</span> (<span class=\"title\">Extension</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)decode:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</div><div class=\"line\">    <span class=\"comment\">// 一层层父类往上查找，对父类的属性执行归解档方法</span></div><div class=\"line\">    Class c = <span class=\"keyword\">self</span>.class;</div><div class=\"line\">    <span class=\"keyword\">while</span> (c &amp;&amp;c != [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> outCount = <span class=\"number\">0</span>;</div><div class=\"line\">        Ivar *ivars = class_copyIvarList(c, &amp;outCount);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i++) &#123;</div><div class=\"line\">            Ivar ivar = ivars[i];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果有实现该方法再去调用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(ignoredNames)]) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([[<span class=\"keyword\">self</span> ignoredNames] containsObject:key]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">id</span> value = [aDecoder decodeObjectForKey:key];</div><div class=\"line\">            [<span class=\"keyword\">self</span> setValue:value forKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        free(ivars);</div><div class=\"line\">        c = [c superclass];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encode:(<span class=\"built_in\">NSCoder</span> *)aCoder &#123;</div><div class=\"line\">    <span class=\"comment\">// 一层层父类往上查找，对父类的属性执行归解档方法</span></div><div class=\"line\">    Class c = <span class=\"keyword\">self</span>.class;</div><div class=\"line\">    <span class=\"keyword\">while</span> (c &amp;&amp;c != [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]) &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> outCount = <span class=\"number\">0</span>;</div><div class=\"line\">        Ivar *ivars = class_copyIvarList([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], &amp;outCount);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; outCount; i++) &#123;</div><div class=\"line\">            Ivar ivar = ivars[i];</div><div class=\"line\">            <span class=\"built_in\">NSString</span> *key = [<span class=\"built_in\">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 如果有实现该方法再去调用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> ([<span class=\"keyword\">self</span> respondsToSelector:<span class=\"keyword\">@selector</span>(ignoredNames)]) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> ([[<span class=\"keyword\">self</span> ignoredNames] containsObject:key]) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">id</span> value = [<span class=\"keyword\">self</span> valueForKeyPath:key];</div><div class=\"line\">            [aCoder encodeObject:value forKey:key];</div><div class=\"line\">        &#125;</div><div class=\"line\">        free(ivars);</div><div class=\"line\">        c = [c superclass];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<p>使用方法</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置需要忽略的属性</span></div><div class=\"line\">- (<span class=\"built_in\">NSArray</span> *)ignoredNames &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> @[<span class=\"string\">@\"bone\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 在系统方法内来调用我们的方法</span></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithCoder:(<span class=\"built_in\">NSCoder</span> *)aDecoder &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">self</span> = [<span class=\"keyword\">super</span> init]) &#123;</div><div class=\"line\">        [<span class=\"keyword\">self</span> decode:aDecoder];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)encodeWithCoder:(<span class=\"built_in\">NSCoder</span> *)aCoder &#123;</div><div class=\"line\">    [<span class=\"keyword\">self</span> encode:aCoder];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-4-替换方法实现\"><a href=\"#3-4-替换方法实现\" class=\"headerlink\" title=\"3.4 替换方法实现\"></a>3.4 替换方法实现</h4><p>假设现在需要一个圆角按钮，并且保证点击触发事件的范围必须要这个圆之内，那么通过一个UIButton+Runtime的扩展来替换旧有-pointInside:withEvent:方法</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">UIButton</span>(<span class=\"title\">Runtime</span>)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"built_in\">BOOL</span> roundTouchEnable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">void</span> * RoundTouchEnableKey = &amp;RoundTouchEnableKey;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">UIButton</span>(<span class=\"title\">Runtime</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)roundTouchEnable</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [objc_getAssociatedObject(<span class=\"keyword\">self</span>, RoundTouchEnableKey) boolValue];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)setRoundTouchEnable: (<span class=\"built_in\">BOOL</span>)roundTouchEnable</div><div class=\"line\">&#123;</div><div class=\"line\">    objc_setAssociatedObject(<span class=\"keyword\">self</span>, RoundTouchEnableKey, @(roundTouchEnable), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (<span class=\"built_in\">BOOL</span>)replacePointInside: (<span class=\"built_in\">CGPoint</span>)point withEvent: (<span class=\"built_in\">UIEvent</span> *)event</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">CGRectGetWidth</span>(<span class=\"keyword\">self</span>.frame) != <span class=\"built_in\">CGRectGetHeight</span>(<span class=\"keyword\">self</span>.frame) </div><div class=\"line\">        || !<span class=\"keyword\">self</span>.roundTouchEnable)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> pointInside: point withEvent: event];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">CGFloat</span> radius = <span class=\"built_in\">CGRectGetWidth</span>(<span class=\"keyword\">self</span>.frame) / <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">CGPoint</span> offset = <span class=\"built_in\">CGPointMake</span>(point.x - radius, point.y - radius);</div><div class=\"line\">    <span class=\"keyword\">return</span> sqrt(offset.x * offset.x + offset.y * offset.y) &lt;= radius;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 替换方法实现</span></div><div class=\"line\">+ (<span class=\"keyword\">void</span>)initialize</div><div class=\"line\">&#123;</div><div class=\"line\">    [<span class=\"keyword\">super</span> initialize];</div><div class=\"line\">    Method replaceMethod = class_getInstanceMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(replacePointInside:withEvent:));</div><div class=\"line\">    Method originMethod = class_getInstanceMethod([<span class=\"keyword\">self</span> <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(pointInside:withEvent:));</div><div class=\"line\">    method_setImplementation(originMethod, method_getImplementation(replaceMethod));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<h2 id=\"4-Runtime消息机制\"><a href=\"#4-Runtime消息机制\" class=\"headerlink\" title=\"4 Runtime消息机制\"></a>4 Runtime消息机制</h2><h4 id=\"4-1-C是一门动态语言\"><a href=\"#4-1-C是一门动态语言\" class=\"headerlink\" title=\"4.1 C是一门动态语言\"></a>4.1 C是一门动态语言</h4><ul>\n<li>静态语言：在运行前会进行类型判断，类的所有成员、方法都会在编译阶段确定好内存地址。类成员只能访问属于自己的方法和变量，如果方法调用错误，代码无法通过编译，会直接引起编译器报错。因此，静态语言结构规范、便于调试、且可以进行多样的性能优化。常见的静态语言包括java/C++/C等。</li>\n<li>动态语言：大部分的判断工作被推迟到运行时进行，类的成员变量、方法地址都在运行时确认。可以在运行时动态的添加类成员、方法等。具有较高的灵活性和可定制性、便于阅读，但方法通常无法进行内联等优化。</li>\n</ul>\n<blockquote>\n<p><code>smalltalk</code>是动态语言的鼻祖，更是OC发展的最大推动力。在<code>smalltalk</code>中，所有的东西都是对象（或者都应该被当做对象），例如表达式<code>5 + 3</code>被理解成向对象5发送了消息+，其中接收的参数是 3。</p>\n</blockquote>\n<h4 id=\"4-2-消息发送过程\"><a href=\"#4-2-消息发送过程\" class=\"headerlink\" title=\"4.2 消息发送过程\"></a>4.2 消息发送过程</h4><figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//无参数</span></div><div class=\"line\">objc_msgSend(receiver, selector)</div><div class=\"line\"><span class=\"comment\">//有参数时</span></div><div class=\"line\">objc_msgSend(receiver, selector, arg1, arg2, ...)</div></pre></td></tr></table></figure>\n<h5 id=\"4-2-1-消息发送总览\"><a href=\"#4-2-1-消息发送总览\" class=\"headerlink\" title=\"4.2.1 消息发送总览\"></a>4.2.1 消息发送总览</h5><ol>\n<li>检测这个<code>selector</code> 是不是要忽略的。比如 Mac OS X 开发，有了垃圾回收就不理会<code>retain</code>,<code>release</code>这些函数了。</li>\n<li>检测这个<code>target</code>是不是<code>nil</code>对象。ObjC的特性是允许对一个<code>nil</code>对象执行任何一个方法不会Crash，因为会被忽略掉。</li>\n<li>如果上面两个通过，就从先<code>cache</code>里面找这个类的<code>IMP</code>，找到就直接跳到对应函数里面。</li>\n<li>如果<code>cache</code>里面没有，就到类的方法列表中查找，然后超类的方法列表，一直到<code>NSObject</code>。</li>\n<li>如果还说没有就要进入<code>动态方法</code>解析了。</li>\n</ol>\n<blockquote>\n<p>为了高度优化性能，苹果直接使用汇编实现了这个函数（源码处于Source/objc-msg-arm.s文件下）：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*****************************************************************</div><div class=\"line\"> *</div><div class=\"line\"> * id objc_msgSend(id self, SEL    _cmd,...);</div><div class=\"line\"> *</div><div class=\"line\"> *****************************************************************/</span></div><div class=\"line\">    ENTRY objc_msgSend</div><div class=\"line\">    MESSENGER_START</div><div class=\"line\"></div><div class=\"line\">    cbz    r0, LNilReceiver_f    <span class=\"comment\">// 判断消息接收者是否为nil</span></div><div class=\"line\"></div><div class=\"line\">    ldr    r9, [r0]              <span class=\"comment\">// r9 = self-&gt;isa</span></div><div class=\"line\">    CacheLookup NORMAL           <span class=\"comment\">// 到缓存中查找方法</span></div><div class=\"line\"></div><div class=\"line\">LCacheMiss:                      <span class=\"comment\">// 方法未缓存</span></div><div class=\"line\">    MESSENGER_END_SLOW</div><div class=\"line\">    ldr    r9, [r0, <span class=\"meta\">#ISA]        </span></div><div class=\"line\">    b    __objc_msgSend_uncached</div><div class=\"line\"></div><div class=\"line\">LNilReceiver:                    <span class=\"comment\">// 消息接收者为nil处理</span></div><div class=\"line\">    mov    r1, <span class=\"meta\">#0</span></div><div class=\"line\">    mov    r2, <span class=\"meta\">#0</span></div><div class=\"line\">    mov    r3, <span class=\"meta\">#0</span></div><div class=\"line\">    FP_RETURN_ZERO</div><div class=\"line\">    MESSENGER_END_NIL</div><div class=\"line\">    bx    lr    </div><div class=\"line\"></div><div class=\"line\">LMsgSendExit:</div><div class=\"line\">    END_ENTRY objc_msgSend</div></pre></td></tr></table></figure>\n<h5 id=\"4-2-2-查找方法\"><a href=\"#4-2-2-查找方法\" class=\"headerlink\" title=\"4.2.2 查找方法\"></a>4.2.2 查找方法</h5><blockquote>\n<p>查找方法实现是通过_class_lookupMethodAndLoadCache3这个函数完成的：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div></pre></td><td class=\"code\"><pre><div class=\"line\">IMP _class_lookupMethodAndLoadCache3(<span class=\"keyword\">id</span> obj, SEL sel, Class cls)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> lookUpImpOrForward(cls, sel, obj, </div><div class=\"line\">                          <span class=\"literal\">YES</span><span class=\"comment\">/*initialize*/</span>, <span class=\"literal\">NO</span><span class=\"comment\">/*cache*/</span>, <span class=\"literal\">YES</span><span class=\"comment\">/*resolver*/</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">IMP lookUpImpOrForward(Class cls, SEL sel, <span class=\"keyword\">id</span> inst, </div><div class=\"line\">                   <span class=\"keyword\">bool</span> initialize, <span class=\"keyword\">bool</span> cache, <span class=\"keyword\">bool</span> resolver)</div><div class=\"line\">&#123;</div><div class=\"line\">    Class curClass;</div><div class=\"line\">    IMP methodPC = <span class=\"literal\">nil</span>;</div><div class=\"line\">    Method meth;</div><div class=\"line\">    <span class=\"keyword\">bool</span> triedResolver = <span class=\"literal\">NO</span>;</div><div class=\"line\"></div><div class=\"line\">    methodListLock.assertUnlocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果传入的cache为YES，到类缓存中查找方法缓存</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cache) &#123;</div><div class=\"line\">        methodPC = _cache_getImp(cls, sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (methodPC) <span class=\"keyword\">return</span> methodPC;    </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 判断类是否已经被释放</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (cls == _class_getFreedObjectClass())</div><div class=\"line\">        <span class=\"keyword\">return</span> (IMP) _freedHandler;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果类未初始化，对其进行初始化。如果这个消息是initialize，那么直接进行类的初始化</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (initialize  &amp;&amp;  !cls-&gt;isInitialized()) &#123;</div><div class=\"line\">        _class_initialize (_class_getNonMetaClass(cls, inst));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"> retry:</div><div class=\"line\">    methodListLock.lock();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 忽略在GC环境下的部分消息，比如retain、release等</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (ignoreSelector(sel)) &#123;</div><div class=\"line\">        methodPC = _cache_addIgnoredEntry(cls, sel);</div><div class=\"line\">        <span class=\"keyword\">goto</span> done;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 遍历缓存方法，如果找到，直接返回</span></div><div class=\"line\">    methodPC = _cache_getImp(cls, sel);</div><div class=\"line\">    <span class=\"keyword\">if</span> (methodPC) <span class=\"keyword\">goto</span> done;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 遍历类自身的方法列表查找方法实现</span></div><div class=\"line\">    meth = _class_getMethodNoSuper_nolock(cls, sel);</div><div class=\"line\">    <span class=\"keyword\">if</span> (meth) &#123;</div><div class=\"line\">        log_and_fill_cache(cls, cls, meth, sel);</div><div class=\"line\">        methodPC = method_getImplementation(meth);</div><div class=\"line\">        <span class=\"keyword\">goto</span> done;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 尝试向上遍历父类的方法列表查找实现</span></div><div class=\"line\">    curClass = cls;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((curClass = curClass-&gt;superclass)) &#123;</div><div class=\"line\">        <span class=\"comment\">// Superclass cache.</span></div><div class=\"line\">        meth = _cache_getMethod(curClass, sel, _objc_msgForward_impcache);</div><div class=\"line\">        <span class=\"keyword\">if</span> (meth) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (meth != (Method)<span class=\"number\">1</span>) &#123; </div><div class=\"line\">                log_and_fill_cache(cls, curClass, meth, sel);</div><div class=\"line\">                methodPC = method_getImplementation(meth);</div><div class=\"line\">                <span class=\"keyword\">goto</span> done;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// Found a forward:: entry in a superclass.</span></div><div class=\"line\">                <span class=\"comment\">// Stop searching, but don't cache yet; call method </span></div><div class=\"line\">                <span class=\"comment\">// resolver for this class first.</span></div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 查找父类的方法列表</span></div><div class=\"line\">        meth = _class_getMethodNoSuper_nolock(curClass, sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (meth) &#123;</div><div class=\"line\">            log_and_fill_cache(cls, curClass, meth, sel);</div><div class=\"line\">            methodPC = method_getImplementation(meth);</div><div class=\"line\">            <span class=\"keyword\">goto</span> done;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 没有找到任何的方法实现，进入消息转发第一阶段“动态方法解析”</span></div><div class=\"line\">    <span class=\"comment\">// 调用+ (BOOL)resolveInstanceMethod: (SEL)selector</span></div><div class=\"line\">    <span class=\"comment\">// 征询接收者所属的类是否能够动态的添加这个未实现的方法来解决问题</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (resolver  &amp;&amp;  !triedResolver) &#123;</div><div class=\"line\">        methodListLock.unlock();</div><div class=\"line\">        _class_resolveMethod(cls, sel, inst);</div><div class=\"line\">        triedResolver = <span class=\"literal\">YES</span>;</div><div class=\"line\">        <span class=\"keyword\">goto</span> retry;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 仍然没有找到方法实现进入消息转发第二阶段“备援接收者”</span></div><div class=\"line\">    <span class=\"comment\">// 先后会调用 -(id)forwardingTargetForSelector: (SEL)selector </span></div><div class=\"line\">    <span class=\"comment\">// 以及 - (void)forwardInvocation: (NSInvocation*)invocation 进行最后的补救</span></div><div class=\"line\">    <span class=\"comment\">// 如果补救未成功抛出消息发送错误异常</span></div><div class=\"line\">    _cache_addForwardEntry(cls, sel);</div><div class=\"line\">    methodPC = _objc_msgForward_impcache;</div><div class=\"line\"></div><div class=\"line\"> done:</div><div class=\"line\">    methodListLock.unlock();</div><div class=\"line\"></div><div class=\"line\">    assert(!(ignoreSelector(sel)  &amp;&amp;  methodPC != (IMP)&amp;_objc_ignored_method));</div><div class=\"line\">    <span class=\"keyword\">return</span> methodPC;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>以上为方法调用全部过程，主要分为三部分：</strong></p>\n<p>1、查找是否存在对应方法缓存，如果存在直接返回调用，为了优化性能，方法的缓存使用了散列表的方式。</p>\n<p>2、未找到缓存， 到类本身或顺着类结构向上查找方法实现，返回<code>method_t *</code>类型也就是<code>Method</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//非加锁状态下查找方法实现</span></div><div class=\"line\"><span class=\"keyword\">static</span> method_t * getMethodNoSuper_nolock(Class cls, SEL sel)</div><div class=\"line\">&#123;</div><div class=\"line\">    runtimeLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    assert(cls-&gt;isRealized());</div><div class=\"line\">    <span class=\"comment\">// fixme nil cls? </span></div><div class=\"line\">    <span class=\"comment\">// fixme nil sel?</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (auto mlists = cls-&gt;data()-&gt;methods.beginLists(), </div><div class=\"line\">            end = cls-&gt;data()-&gt;methods.endLists(); </div><div class=\"line\">             mlists != end;</div><div class=\"line\">               ++mlists)</div><div class=\"line\">    &#123;</div><div class=\"line\">        method_t *m = search_method_list(*mlists, sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (m) <span class=\"keyword\">return</span> m;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 搜索方法列表</span></div><div class=\"line\"><span class=\"keyword\">static</span> method_t * search_method_list(<span class=\"keyword\">const</span> method_list_t *mlist, SEL sel)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> methodListIsFixedUp = mlist-&gt;isFixedUp();</div><div class=\"line\">    <span class=\"keyword\">int</span> methodListHasExpectedSize = mlist-&gt;entsize() == <span class=\"keyword\">sizeof</span>(method_t);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (__builtin_expect(methodListIsFixedUp &amp;&amp; methodListHasExpectedSize, <span class=\"number\">1</span>)) &#123;</div><div class=\"line\">          <span class=\"comment\">// 对有序数组进行线性探测</span></div><div class=\"line\">          <span class=\"keyword\">return</span> findMethodInSortedMethodList(sel, mlist);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// Linear search of unsorted method list</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (auto&amp; meth : *mlist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (meth.name == sel) <span class=\"keyword\">return</span> &amp;meth;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#if DEBUG</span></div><div class=\"line\">    <span class=\"comment\">// sanity-check negative results</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (mlist-&gt;isFixedUp()) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (auto&amp; meth : *mlist) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (meth.name == sel) &#123;</div><div class=\"line\">                _objc_fatal(<span class=\"string\">\"linear search worked when binary search did not\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在这步骤中找到方法实现，则将它加入方法缓存中。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 记录并且缓存方法</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> log_and_fill_cache(Class cls, IMP imp, SEL sel, <span class=\"keyword\">id</span> receiver, Class implementer)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#if SUPPORT_MESSAGE_LOGGING</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (objcMsgLogEnabled) &#123;</div><div class=\"line\">        <span class=\"keyword\">bool</span> cacheIt = logMessageSend(implementer-&gt;isMetaClass(), </div><div class=\"line\">                                cls-&gt;nameForLogging(),</div><div class=\"line\">                                implementer-&gt;nameForLogging(), </div><div class=\"line\">                                sel);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!cacheIt) <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"meta\">#endif</span></div><div class=\"line\">    cache_fill (cls, sel, imp, receiver);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在无加锁状态下缓存方法</span></div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> cache_fill_nolock(Class cls, SEL sel, IMP imp, <span class=\"keyword\">id</span> receiver)</div><div class=\"line\">&#123;</div><div class=\"line\">    cacheUpdateLock.assertLocked();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!cls-&gt;isInitialized()) <span class=\"keyword\">return</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache_getImp(cls, sel)) <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    cache_t *cache = getCache(cls);</div><div class=\"line\">    cache_key_t key = getKey(sel);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 如果缓存占用不到3/4，进行缓存。</span></div><div class=\"line\">    mask_t newOccupied = cache-&gt;occupied() + <span class=\"number\">1</span>;</div><div class=\"line\">    mask_t capacity = cache-&gt;capacity();</div><div class=\"line\">    <span class=\"keyword\">if</span> (cache-&gt;isConstantEmptyCache()) &#123;</div><div class=\"line\">        cache-&gt;reallocate(capacity, capacity ?: INIT_CACHE_SIZE);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (newOccupied &lt;= capacity / <span class=\"number\">4</span> * <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 扩充缓存。为了性能，扩充后原有缓存方法全部移除</span></div><div class=\"line\">        cache-&gt;expand();</div><div class=\"line\">    &#125;</div><div class=\"line\">    bucket_t *bucket = cache-&gt;find(key, receiver);</div><div class=\"line\">    <span class=\"keyword\">if</span> (bucket-&gt;key() == <span class=\"number\">0</span>) cache-&gt;incrementOccupied();</div><div class=\"line\">    bucket-&gt;set(key, imp);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果在类自身方法中没找到，那么循环父类方法，重复上面动作。</p>\n<p>3、如果未找到任何方法实现，则会出发消息转发机制。</p>\n<blockquote>\n<p>消息转发分为两个阶段，第一个阶段我们可以通过动态添加方法之后让编译器再次执行查找方法实现的过程；第二个阶段称作备援的接收者，就是找到一个接盘侠来处理这个事件。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">void</span> _class_resolveMethod(Class cls, SEL sel, <span class=\"keyword\">id</span> inst)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 非beta类的情况下直接调用 resolveInstanceMethod 方法</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (! cls-&gt;isMetaClass()) &#123;</div><div class=\"line\">        _class_resolveInstanceMethod(cls, sel, inst);</div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 先调用 resolveClassMethod 请求动态添加方法</span></div><div class=\"line\">        <span class=\"comment\">// 然后进行一次查找判断是否处理完成</span></div><div class=\"line\">        <span class=\"comment\">// 如果没有添加，再调用 resolveInstanceMethod 方法</span></div><div class=\"line\">        _class_resolveClassMethod(cls, sel, inst);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!lookUpImpOrNil(cls, sel, inst, </div><div class=\"line\">                      <span class=\"literal\">NO</span><span class=\"comment\">/*initialize*/</span>, <span class=\"literal\">YES</span><span class=\"comment\">/*cache*/</span>, <span class=\"literal\">NO</span><span class=\"comment\">/*resolver*/</span>)) </div><div class=\"line\">        &#123;</div><div class=\"line\">            _class_resolveInstanceMethod(cls, sel, inst);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"4-2-3-方法缓存\"><a href=\"#4-2-3-方法缓存\" class=\"headerlink\" title=\"4.2.3 方法缓存\"></a>4.2.3 方法缓存</h5><blockquote>\n<p><code>cache</code>存储着我们在方法调用中需要查找的方法缓存。作为缓存方法的cache采用了散列表，以此来大幅度提高检索的速度：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#define CACHE_HASH(sel, mask) (((uintptr_t)(sel)&gt;&gt;2) &amp; (mask))</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">struct</span> cache_t &#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> bucket_t *_buckets;</div><div class=\"line\">    mask_t _mask;</div><div class=\"line\">    mask_t _occupied;</div><div class=\"line\">    <span class=\"comment\">// functions</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// cache method</span></div><div class=\"line\">buckets = (cache_entry **)cache-&gt;buckets;</div><div class=\"line\"><span class=\"keyword\">for</span> (index = <span class=\"built_in\">CACHE_HASH</span>(sel, cache-&gt;mask); </div><div class=\"line\">     buckets[index] != <span class=\"literal\">NULL</span>; </div><div class=\"line\">     index = (index+<span class=\"number\">1</span>) &amp; cache-&gt;mask)</div><div class=\"line\">&#123; &#125;</div><div class=\"line\">buckets[index] = entry;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//利用sel的指针地址和mask做一个简单的位运算，然后找到一个空槽存储起来。</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>以此推出从缓存中查找sel实现代码CacheLookup, 苹果使用汇编完成查找步骤，用以优化性能。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">.macro CacheLookup</div><div class=\"line\"></div><div class=\"line\">    ldrh    r12, [r9, <span class=\"meta\">#CACHE_MASK]    // r12 = mask</span></div><div class=\"line\">    ldr    r9, [r9, <span class=\"meta\">#CACHE]    // r9 = buckets</span></div><div class=\"line\">.if $<span class=\"number\">0</span> == STRET  ||  $<span class=\"number\">0</span> == SUPER_STRET</div><div class=\"line\">    and    r12, r12, r2        <span class=\"comment\">// r12 = index = SEL &amp; mask</span></div><div class=\"line\">.else</div><div class=\"line\">    and    r12, r12, r1        <span class=\"comment\">// r12 = index = SEL &amp; mask</span></div><div class=\"line\">.endif</div><div class=\"line\">    add    r9, r9, r12, LSL <span class=\"meta\">#3    // r9 = bucket = buckets+index*8</span></div><div class=\"line\">    ldr    r12, [r9]        <span class=\"comment\">// r12 = bucket-&gt;sel</span></div><div class=\"line\"><span class=\"number\">2</span>:</div><div class=\"line\">.if $<span class=\"number\">0</span> == STRET  ||  $<span class=\"number\">0</span> == SUPER_STRET</div><div class=\"line\">    teq    r12, r2</div><div class=\"line\">.else</div><div class=\"line\">    teq    r12, r1</div><div class=\"line\">.endif</div><div class=\"line\">    bne    <span class=\"number\">1</span>f</div><div class=\"line\">    CacheHit $<span class=\"number\">0</span></div><div class=\"line\"><span class=\"number\">1</span>:    </div><div class=\"line\">    cmp    r12, <span class=\"meta\">#1</span></div><div class=\"line\">    blo    LCacheMiss_f        <span class=\"comment\">// if (bucket-&gt;sel == 0) cache miss</span></div><div class=\"line\">    it    eq            <span class=\"comment\">// if (bucket-&gt;sel == 1) cache wrap</span></div><div class=\"line\">    ldreq    r9, [r9, <span class=\"meta\">#4]        // bucket-&gt;imp is before first bucket</span></div><div class=\"line\">    ldr    r12, [r9, <span class=\"meta\">#8]!        // r12 = (++bucket)-&gt;sel</span></div><div class=\"line\">    b    <span class=\"number\">2</span>b</div><div class=\"line\"></div><div class=\"line\">.endmacro</div></pre></td></tr></table></figure>\n<h4 id=\"4-3-消息转发\"><a href=\"#4-3-消息转发\" class=\"headerlink\" title=\"4.3 消息转发\"></a>4.3 消息转发</h4><blockquote>\n<p>通常情况下，调用不属于某个对象的方法的时候，应用就会崩溃crash。<br>通过方法调用源码可以看到，并不是没有找到方法实现就直接crash。<br>在crash之前编译器会进行消息转发机制，有依次有三次机会。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一阶段         resolveInstanceMethod  </div><div class=\"line\">(动态添加方法：添加对应方法，跳到方法实现)             </div><div class=\"line\">\t\t\t\t\t\t   </div><div class=\"line\">第二阶段\t\t forwardingTargetForSelector</div><div class=\"line\">(最后的接盘侠：直接接管对应方法，实现方法)</div><div class=\"line\"></div><div class=\"line\">\t\t\t     forwardInvocation</div></pre></td></tr></table></figure>\n<p>1、第一阶段(resolveInstanceMethod)</p>\n<p>避免程序因为类型错误导致crash，可以通过<code>class_addMethod</code>动态添加处理方法。<br>类可以在<code>objc_registerClassPair</code>完成类注册后动态添加方法，但不能动态添加属性，<br>类似于<code>category</code>。</p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">id</span> wrongTypeGetter(<span class=\"keyword\">id</span> object, SEL sel) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">void</span> wrongTypeSetter(<span class=\"keyword\">id</span> object, SEL sel, <span class=\"keyword\">id</span> value) &#123;</div><div class=\"line\">    <span class=\"comment\">// do nothing</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">+ (<span class=\"built_in\">BOOL</span>)resolveInstanceMethod: (SEL)selector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">NSString</span> * selName = <span class=\"built_in\">NSStringFromSelector</span>(selector);</div><div class=\"line\">    <span class=\"keyword\">if</span> ([sel hasPrefix: <span class=\"string\">@\"set\"</span>]) &#123;</div><div class=\"line\">        class_addMethod(<span class=\"keyword\">self</span>, selector, (IMP)wrongTypeSetter, <span class=\"string\">\"v@:@\"</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        class_addMethod(<span class=\"keyword\">self</span>, selector, (IMP)wrongTypeGetter, <span class=\"string\">\"@@:\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>2、第二阶段(forwardingTargetForSelector)</p>\n<blockquote>\n<p>在iOS中不支持多继承，尽管我们可以通过协议和组合模式实现<code>伪多继承</code>。<code>伪多继承</code>和<code>多继承</code>的区别在于：<code>多继承</code>是将多个类的功能组合到一个对象当中，而<code>伪多继承</code>多个类的功能依旧分布在不同对象当中，但是对象彼此对消息发送者透明。那么，如果我们消息转发给另一个对象可以用来实现这种伪多继承。</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Person</span>: <span class=\"title\">NSObject</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">strong</span>) <span class=\"built_in\">NSNumber</span> * age;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">Person</span></span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">id</span>)forwardingTargetForSelector: (SEL)aSelector</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// 甚至可以通过runtime遍历自己属性找到可以响应方法的接盘侠</span></div><div class=\"line\">    <span class=\"built_in\">NSString</span> * selName = <span class=\"built_in\">NSStringFromSelector</span>(aSelector);</div><div class=\"line\">    <span class=\"keyword\">if</span> ([selName hasSuffix: <span class=\"string\">@\"Value\"</span>]) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.age;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// View controller</span></div><div class=\"line\"><span class=\"keyword\">id</span> p = [[Person alloc] init];</div><div class=\"line\">[p setAge: @(<span class=\"number\">18</span>)];</div><div class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"%lu, %.2f\"</span>, [p integerValue], [p doubleValue]);    <span class=\"comment\">//18, 18.00</span></div></pre></td></tr></table></figure>\n<p>3、第二阶段最后(forwardInvocation)</p>\n<blockquote>\n<p><code>runtime</code>需要生成一个<code>methodSignature</code>变量来组装，这将通过调用消息接收者的<code>-(NSMethodSignature *)methodSignatureForSelector:</code>获取，这个变量包含了方法的参数类型、参数个数以及消息接收者等信息。接着把这个变量组装成一个NSInvocation对象进行最后一次的消息转发，调用接收者的<code>-forwardInvocation:</code>方法。我们可以对<code>invocation</code>做任何事情，包括随意修改参数值、消息接收者等。我最常拿来干的事情就是减少数组的遍历工作：</p>\n</blockquote>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSArray</span>(<span class=\"title\">Runtime</span>)</span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation: (<span class=\"built_in\">NSInvocation</span> *)anInvocation</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> item <span class=\"keyword\">in</span> <span class=\"keyword\">self</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ([item respondsToSelector: anInvocation.selector]) &#123;</div><div class=\"line\">            [anInvocation invokeWithTarget: item];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>NSInvocation对象封装了动态库向接收器转发执行消息所需的所有必要信息，如目标对象、方法选择器、方法参数。因此可以借助NSInvocation实例，使用内部的选择器和其他信息，在任何时候调用接收器。同一个NSInvocation实例可重复调用接收器的同一个方法，或通过不同的目标和方法签名进行复用。<br>OC中直接调用对象的消息方法有两种：<br>1.<code>performSelector:withObject</code><br>2.NSInvocation<br>实现NSArray的map方法。可以让数组中每个元素接受消息，并且返回一个新的数组。该方法类似于<code>makeObjectsPerformSelector:</code>，不同的是map可以传送带有多个参数的消息，而且可以延伸至数组以外的集合。比如:</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">int main(int argc, const char * argv[]) &#123;</div><div class=\"line\">\tNSArray *testArray = @[@1, @2, @3];</div><div class=\"line\">\tid stringArray = [[testArray map] stringValue];</div><div class=\"line\">\tNSLog(@%@\", stringArray); // \"1\", \"2\", \"3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>实现代码</strong></p>\n<figure class=\"highlight objectivec\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//NSArray+Map.h</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSArray</span> (<span class=\"title\">Map</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)map;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//NSArray+Map.m</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSArray</span> (<span class=\"title\">Map</span>)</span></div><div class=\"line\">- (<span class=\"keyword\">id</span>)map &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> [[<span class=\"built_in\">NSArrayMapProxy</span> alloc] initWithArray:<span class=\"keyword\">self</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//实现NSArrayMapProxy</span></div><div class=\"line\"><span class=\"comment\">//NSArrayMapProxy.h</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">NSArrayMapProxy</span> : <span class=\"title\">NSProxy</span> </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">NSArray</span> *_array;</div><div class=\"line\">&#125;</div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithArray:(<span class=\"built_in\">NSArray</span> *)array;</div><div class=\"line\"><span class=\"keyword\">@end</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//NSArrayMapProxy.m</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">NSArrayMapProxy</span> </span></div><div class=\"line\"></div><div class=\"line\">- (<span class=\"keyword\">instancetype</span>)initWithArray:(<span class=\"built_in\">NSArray</span> *)array &#123;</div><div class=\"line\">\t_array = array;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">self</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//示例中的数组array包含三个NSNumber类型的对象，于是向proxy发送stringValue消息的时候，proxy就负责将消息转发给数组中的每个元素。于是NSArrayMapProxy就需要重载NSProxy的两个方法，来实现消息转发机制。</span></div><div class=\"line\"><span class=\"comment\">//1.在NSArrayMapProxy收到消息后，首先methodSignatureForSelector:会被调用，用于返回一个方法签名。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//这里重载方法时，遍历数组中的元素，如果有元素响应消息，就可以通过该元素找到消息的方法签名。</span></div><div class=\"line\"><span class=\"comment\">//这个函数也就是找到方法的实现，自己没有实现方法，就到别的对象中找。</span></div><div class=\"line\">- (<span class=\"keyword\">nullable</span> <span class=\"built_in\">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel &#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> _array) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ([obj respondsToSelector:sel]) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> [obj methodSignatureForSelector:sel];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"keyword\">super</span> methodSignatureForSelector:sel];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//2.在得到方法签名之后，接着会调`forwardInvocation:`方法，于是可以重载方法后在这里决定消息的转发去向。</span></div><div class=\"line\">- (<span class=\"keyword\">void</span>)forwardInvocation:(<span class=\"built_in\">NSInvocation</span> *)invocation &#123;</div><div class=\"line\">\tSEL sel = invocation.selector;</div><div class=\"line\">\t<span class=\"built_in\">NSMutableArray</span> *mappedArray = [<span class=\"built_in\">NSMutableArray</span> arrayWithCapacity:_array.count];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">id</span> obj <span class=\"keyword\">in</span> _array) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> ([obj respondsToSelector:sel]) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//[NSInvocation invoke]方法调用</span></div><div class=\"line\">\t\t\t[invocation invokeWithTarget:obj]; <span class=\"comment\">//调用数组中元素obj的stringValue方法</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">id</span> mappedValue; <span class=\"comment\">//用于存储调用返回value</span></div><div class=\"line\">\t\t\t[invocation getReturnValue:&amp;mappedValue];</div><div class=\"line\">\t\t\t[mappedArray addObject:mapped];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//设置调用[NSArrayMapProxy stringValue]的返回值</span></div><div class=\"line\">\t[invocation setReturnValue:&amp;mappedArray];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">@end</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>具体思路：为NSArray添加map方法，当调用map方式时，返回的是NSArrayMapProxy对象。之后调用NSArrayMapProxy对象的stringValue方法。<br>NSArrayMapProxy对象的作用就是在NSArray元素中找到sel方法的签名(就是得到stringValue的实现方法)，然后让每个元素都调用这个方法，并将返回值存储起来，得到新的NSArray。</p>\n</blockquote>\n<p>还有利用类似思路解决服务器返回NSNull问题。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}